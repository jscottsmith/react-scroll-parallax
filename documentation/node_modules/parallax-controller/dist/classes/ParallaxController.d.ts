import { View } from './View';
import { Scroll } from './Scroll';
import { Element } from './Element';
import { CreateElementOptions, ParallaxControllerOptions, ParallaxElementConfig, ValidScrollAxis, ViewElement } from '../types';
/**
 * -------------------------------------------------------
 * Parallax Controller
 * -------------------------------------------------------
 *
 * The global controller for setting up and managing a scroll view of elements.
 *
 */
export declare class ParallaxController {
    elements: Element[];
    scrollAxis: ValidScrollAxis;
    viewEl: ViewElement;
    scroll: Scroll;
    view: View;
    _hasScrollContainer: boolean;
    _ticking: boolean;
    _supportsPassive: boolean;
    _resizeObserver?: ResizeObserver;
    /**
     * Static method to instantiate the ParallaxController.
     * @returns {Class} ParallaxController
     */
    static init(options: ParallaxControllerOptions): ParallaxController;
    constructor({ scrollAxis, scrollContainer, }: ParallaxControllerOptions);
    _bindAllMethods(): void;
    _addListeners(el: ViewElement): void;
    _removeListeners(el: ViewElement): void;
    _addResizeObserver(): void;
    _getScrollPosition(): any[];
    /**
     * Window scroll handler sets scroll position
     * and then calls '_updateAllElements()'.
     */
    _handleScroll(): void;
    /**
     * Window resize handler. Sets the new window inner height
     * then updates parallax element attributes and positions.
     */
    _handleUpdateCache(): void;
    /**
     * Update element positions.
     * Determines if the element is in view based on the cached
     * attributes, if so set the elements parallax styles.
     */
    _updateAllElements({ updateCache }?: {
        updateCache?: boolean;
    }): void;
    /**
     * Update element positions.
     * Determines if the element is in view based on the cached
     * attributes, if so set the elements parallax styles.
     */
    _updateElementPosition(element: Element): void;
    /**
     * Cache the window width/height.
     */
    _setViewSize(): View;
    /**
     * -------------------------------------------------------
     * Public methods
     * -------------------------------------------------------
     */
    /**
     * Returns all the parallax elements in the controller
     */
    getElements(): Element[];
    /**
     * Creates and returns new parallax element with provided options to be managed by the controller.
     */
    createElement(options: CreateElementOptions): Element;
    /**
     * Remove an element by id
     */
    removeElementById(id: number): void;
    /**
     * Updates an existing parallax element object with new options.
     */
    updateElementPropsById(id: number, props: ParallaxElementConfig): void;
    /**
     * Remove a target elements parallax styles
     */
    resetElementStyles(element: Element): void;
    /**
     * Updates all cached attributes on parallax elements.
     */
    update(): void;
    /**
     * Updates the scroll container of the parallax controller
     */
    updateScrollContainer(el: HTMLElement): void;
    /**
     * Removes all listeners and resets all styles on managed elements.
     */
    destroy(): void;
}
