{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ConfigAPI } from '@babel/core'\nimport addJSXAttribute, {\n  Attribute,\n} from '@svgr/babel-plugin-add-jsx-attribute'\nimport removeJSXAttribute from '@svgr/babel-plugin-remove-jsx-attribute'\nimport removeJSXEmptyExpression from '@svgr/babel-plugin-remove-jsx-empty-expression'\nimport replaceJSXAttributeValue, {\n  Value,\n} from '@svgr/babel-plugin-replace-jsx-attribute-value'\nimport svgDynamicTitle from '@svgr/babel-plugin-svg-dynamic-title'\nimport svgEmDimensions from '@svgr/babel-plugin-svg-em-dimensions'\nimport transformReactNativeSVG from '@svgr/babel-plugin-transform-react-native-svg'\nimport transformSvgComponent, {\n  Options as TransformOptions,\n} from '@svgr/babel-plugin-transform-svg-component'\n\nexport interface Options extends TransformOptions {\n  ref?: boolean\n  titleProp?: boolean\n  expandProps?: boolean | 'start' | 'end'\n  dimensions?: boolean\n  icon?: boolean | string | number\n  native?: boolean\n  svgProps?: { [key: string]: string }\n  replaceAttrValues?: { [key: string]: string }\n}\n\nconst getAttributeValue = (value: string) => {\n  const literal =\n    typeof value === 'string' && value.startsWith('{') && value.endsWith('}')\n  return { value: literal ? value.slice(1, -1) : value, literal }\n}\n\nconst propsToAttributes = (props: { [key: string]: string }): Attribute[] => {\n  return Object.keys(props).map((name) => {\n    const { literal, value } = getAttributeValue(props[name])\n    return { name, literal, value }\n  })\n}\n\nfunction replaceMapToValues(replaceMap: { [key: string]: string }): Value[] {\n  return Object.keys(replaceMap).map((value) => {\n    const { literal, value: newValue } = getAttributeValue(replaceMap[value])\n    return { value, newValue, literal }\n  })\n}\n\nconst plugin = (_: ConfigAPI, opts: Options) => {\n  let toRemoveAttributes = ['version']\n  let toAddAttributes: Attribute[] = []\n\n  if (opts.svgProps) {\n    toAddAttributes = [...toAddAttributes, ...propsToAttributes(opts.svgProps)]\n  }\n\n  if (opts.ref) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'ref',\n        value: 'ref',\n        literal: true,\n      },\n    ]\n  }\n\n  if (opts.titleProp) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'aria-labelledby',\n        value: 'titleId',\n        literal: true,\n      },\n    ]\n  }\n\n  if (opts.expandProps) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'props',\n        spread: true,\n        position:\n          opts.expandProps === 'start' || opts.expandProps === 'end'\n            ? opts.expandProps\n            : undefined,\n      },\n    ]\n  }\n\n  if (!opts.dimensions) {\n    toRemoveAttributes = [...toRemoveAttributes, 'width', 'height']\n  }\n\n  const plugins: any[] = [\n    [transformSvgComponent, opts],\n    ...(opts.icon !== false && opts.dimensions\n      ? [\n          [\n            svgEmDimensions,\n            opts.icon !== true\n              ? { width: opts.icon, height: opts.icon }\n              : opts.native\n              ? { width: 24, height: 24 }\n              : {},\n          ],\n        ]\n      : []),\n    [\n      removeJSXAttribute,\n      { elements: ['svg', 'Svg'], attributes: toRemoveAttributes },\n    ],\n    [\n      addJSXAttribute,\n      { elements: ['svg', 'Svg'], attributes: toAddAttributes },\n    ],\n    removeJSXEmptyExpression,\n  ]\n\n  if (opts.replaceAttrValues) {\n    plugins.push([\n      replaceJSXAttributeValue,\n      { values: replaceMapToValues(opts.replaceAttrValues) },\n    ])\n  }\n\n  if (opts.titleProp) {\n    plugins.push(svgDynamicTitle)\n  }\n\n  if (opts.native) {\n    plugins.push(transformReactNativeSVG)\n  }\n\n  return { plugins }\n}\n\nexport default plugin\n"],"names":["transformSvgComponent","svgEmDimensions","removeJSXAttribute","addJSXAttribute","removeJSXEmptyExpression","replaceJSXAttributeValue","svgDynamicTitle","transformReactNativeSVG"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAM,oBAAoB,CAAC,UAAkB;AAC3C,QAAM,UACJ,OAAO,UAAU,YAAY,MAAM,WAAW,QAAQ,MAAM,SAAS;AACvE,SAAO,EAAE,OAAO,UAAU,MAAM,MAAM,GAAG,MAAM,OAAO;AAAA;AAGxD,MAAM,oBAAoB,CAAC,UAAkD;AAC3E,SAAO,OAAO,KAAK,OAAO,IAAI,CAAC,SAAS;AACtC,UAAM,EAAE,SAAS,UAAU,kBAAkB,MAAM;AACnD,WAAO,EAAE,MAAM,SAAS;AAAA;AAAA;AAI5B,4BAA4B,YAAgD;AAC1E,SAAO,OAAO,KAAK,YAAY,IAAI,CAAC,UAAU;AAC5C,UAAM,EAAE,SAAS,OAAO,aAAa,kBAAkB,WAAW;AAClE,WAAO,EAAE,OAAO,UAAU;AAAA;AAAA;MAIxB,SAAS,CAAC,GAAc,SAAkB;AAC9C,MAAI,qBAAqB,CAAC;AAC1B,MAAI,kBAA+B;AAEnC,MAAI,KAAK,UAAU;AACjB,sBAAkB,CAAC,GAAG,iBAAiB,GAAG,kBAAkB,KAAK;AAAA;AAGnE,MAAI,KAAK,KAAK;AACZ,sBAAkB;AAAA,MAChB,GAAG;AAAA,MACH;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA;AAAA;AAAA;AAKf,MAAI,KAAK,WAAW;AAClB,sBAAkB;AAAA,MAChB,GAAG;AAAA,MACH;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA;AAAA;AAAA;AAKf,MAAI,KAAK,aAAa;AACpB,sBAAkB;AAAA,MAChB,GAAG;AAAA,MACH;AAAA,QACE,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UACE,KAAK,gBAAgB,WAAW,KAAK,gBAAgB,QACjD,KAAK,cACL;AAAA;AAAA;AAAA;AAKZ,MAAI,CAAC,KAAK,YAAY;AACpB,yBAAqB,CAAC,GAAG,oBAAoB,SAAS;AAAA;AAGxD,QAAM,UAAiB;AAAA,IACrB,CAACA,2CAAuB;AAAA,IACxB,GAAI,KAAK,SAAS,SAAS,KAAK,aAC5B;AAAA,MACE;AAAA,QACEC;AAAA,QACA,KAAK,SAAS,OACV,EAAE,OAAO,KAAK,MAAM,QAAQ,KAAK,SACjC,KAAK,SACL,EAAE,OAAO,IAAI,QAAQ,OACrB;AAAA;AAAA,QAGR;AAAA,IACJ;AAAA,MACEC;AAAA,MACA,EAAE,UAAU,CAAC,OAAO,QAAQ,YAAY;AAAA;AAAA,IAE1C;AAAA,MACEC;AAAA,MACA,EAAE,UAAU,CAAC,OAAO,QAAQ,YAAY;AAAA;AAAA,IAE1CC;AAAA;AAGF,MAAI,KAAK,mBAAmB;AAC1B,YAAQ,KAAK;AAAA,MACXC;AAAA,MACA,EAAE,QAAQ,mBAAmB,KAAK;AAAA;AAAA;AAItC,MAAI,KAAK,WAAW;AAClB,YAAQ,KAAKC;AAAA;AAGf,MAAI,KAAK,QAAQ;AACf,YAAQ,KAAKC;AAAA;AAGf,SAAO,EAAE;AAAA;;;;"}