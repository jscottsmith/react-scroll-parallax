{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { NodePath, types as t } from '@babel/core'\n\nconst elements = ['svg', 'Svg']\n\nconst createTitleElement = (\n  children: t.JSXExpressionContainer[] = [],\n  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[] = [],\n) => {\n  const title = t.jsxIdentifier('title')\n  return t.jsxElement(\n    t.jsxOpeningElement(title, attributes),\n    t.jsxClosingElement(title),\n    children,\n  )\n}\n\nconst createTitleIdAttribute = () =>\n  t.jsxAttribute(\n    t.jsxIdentifier('id'),\n    t.jsxExpressionContainer(t.identifier('titleId')),\n  )\n\nconst addTitleIdAttribute = (\n  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[],\n) => {\n  const existingId = attributes.find(\n    (attribute) => t.isJSXAttribute(attribute) && attribute.name.name === 'id',\n  ) as t.JSXAttribute | undefined\n\n  if (!existingId) {\n    return [...attributes, createTitleIdAttribute()]\n  }\n  existingId.value = t.jsxExpressionContainer(\n    t.isStringLiteral(existingId.value)\n      ? t.logicalExpression('||', t.identifier('titleId'), existingId.value)\n      : t.identifier('titleId'),\n  )\n  return attributes\n}\n\nconst plugin = () => ({\n  visitor: {\n    JSXElement(path: NodePath<t.JSXElement>) {\n      if (!elements.length) return\n\n      const openingElement = path.get('openingElement')\n      const openingElementName = openingElement.get('name')\n      if (\n        !elements.some((element) =>\n          openingElementName.isJSXIdentifier({ name: element }),\n        )\n      ) {\n        return\n      }\n\n      const getTitleElement = (\n        existingTitle?: t.JSXElement,\n      ): t.JSXExpressionContainer => {\n        const titleExpression = t.identifier('title')\n        if (existingTitle) {\n          existingTitle.openingElement.attributes = addTitleIdAttribute(\n            existingTitle.openingElement.attributes,\n          )\n        }\n        const conditionalTitle = t.conditionalExpression(\n          titleExpression,\n          createTitleElement(\n            [t.jsxExpressionContainer(titleExpression)],\n            existingTitle\n              ? existingTitle.openingElement.attributes\n              : [createTitleIdAttribute()],\n          ),\n          t.nullLiteral(),\n        )\n        if (existingTitle?.children?.length) {\n          // If title already exists render as follows\n          // `{title === undefined ? fallbackTitleElement : titleElement}`\n          return t.jsxExpressionContainer(\n            t.conditionalExpression(\n              t.binaryExpression(\n                '===',\n                titleExpression,\n                t.identifier('undefined'),\n              ),\n              existingTitle,\n              conditionalTitle,\n            ),\n          )\n        }\n        return t.jsxExpressionContainer(conditionalTitle)\n      }\n\n      // store the title element\n      let titleElement: t.JSXExpressionContainer | null = null\n\n      const hasTitle = path.get('children').some((childPath) => {\n        if (childPath.node === titleElement) return false\n        if (!childPath.isJSXElement()) return false\n        const name = childPath.get('openingElement').get('name')\n        if (!name.isJSXIdentifier()) return false\n        if (name.node.name !== 'title') return false\n        titleElement = getTitleElement(childPath.node)\n        childPath.replaceWith(titleElement)\n        return true\n      })\n\n      // create a title element if not already create\n      titleElement = titleElement || getTitleElement()\n      if (!hasTitle) {\n        // path.unshiftContainer is not working well :(\n        // path.unshiftContainer('children', titleElement)\n        path.node.children.unshift(titleElement)\n        path.replaceWith(path.node)\n      }\n    },\n  },\n})\n\nexport default plugin\n"],"names":["t"],"mappings":";;;;AAGA,MAAM,WAAW,CAAC,OAAO;AAEzB,MAAM,qBAAqB,CACzB,WAAuC,IACvC,aAAwD,OACrD;AACH,QAAM,QAAQA,WAAE,cAAc;AAC9B,SAAOA,WAAE,WACPA,WAAE,kBAAkB,OAAO,aAC3BA,WAAE,kBAAkB,QACpB;AAAA;AAIJ,MAAM,yBAAyB,MAC7BA,WAAE,aACAA,WAAE,cAAc,OAChBA,WAAE,uBAAuBA,WAAE,WAAW;AAG1C,MAAM,sBAAsB,CAC1B,eACG;AACH,QAAM,aAAa,WAAW,KAC5B,CAAC,cAAcA,WAAE,eAAe,cAAc,UAAU,KAAK,SAAS;AAGxE,MAAI,CAAC,YAAY;AACf,WAAO,CAAC,GAAG,YAAY;AAAA;AAEzB,aAAW,QAAQA,WAAE,uBACnBA,WAAE,gBAAgB,WAAW,SACzBA,WAAE,kBAAkB,MAAMA,WAAE,WAAW,YAAY,WAAW,SAC9DA,WAAE,WAAW;AAEnB,SAAO;AAAA;MAGH,SAAS;AAAO,EACpB,SAAS;AAAA,IACP,WAAW,MAA8B;AACvC,UAAI,CAAC,SAAS;AAAQ;AAEtB,YAAM,iBAAiB,KAAK,IAAI;AAChC,YAAM,qBAAqB,eAAe,IAAI;AAC9C,UACE,CAAC,SAAS,KAAK,CAAC,YACd,mBAAmB,gBAAgB,EAAE,MAAM,aAE7C;AACA;AAAA;AAGF,YAAM,kBAAkB,CACtB,kBAC6B;AA1DrC;AA2DQ,cAAM,kBAAkBA,WAAE,WAAW;AACrC,YAAI,eAAe;AACjB,wBAAc,eAAe,aAAa,oBACxC,cAAc,eAAe;AAAA;AAGjC,cAAM,mBAAmBA,WAAE,sBACzB,iBACA,mBACE,CAACA,WAAE,uBAAuB,mBAC1B,gBACI,cAAc,eAAe,aAC7B,CAAC,4BAEPA,WAAE;AAEJ,YAAI,qDAAe,aAAf,mBAAyB,QAAQ;AAGnC,iBAAOA,WAAE,uBACPA,WAAE,sBACAA,WAAE,iBACA,OACA,iBACAA,WAAE,WAAW,eAEf,eACA;AAAA;AAIN,eAAOA,WAAE,uBAAuB;AAAA;AAIlC,UAAI,eAAgD;AAEpD,YAAM,WAAW,KAAK,IAAI,YAAY,KAAK,CAAC,cAAc;AACxD,YAAI,UAAU,SAAS;AAAc,iBAAO;AAC5C,YAAI,CAAC,UAAU;AAAgB,iBAAO;AACtC,cAAM,OAAO,UAAU,IAAI,kBAAkB,IAAI;AACjD,YAAI,CAAC,KAAK;AAAmB,iBAAO;AACpC,YAAI,KAAK,KAAK,SAAS;AAAS,iBAAO;AACvC,uBAAe,gBAAgB,UAAU;AACzC,kBAAU,YAAY;AACtB,eAAO;AAAA;AAIT,qBAAe,gBAAgB;AAC/B,UAAI,CAAC,UAAU;AAGb,aAAK,KAAK,SAAS,QAAQ;AAC3B,aAAK,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA;;;;"}