{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { NodePath, types as t } from '@babel/core'\n\ninterface State {\n  replacedComponents: Set<string>\n  unsupportedComponents: Set<string>\n}\n\nconst elementToComponent: { [key: string]: string } = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject',\n}\n\nconst plugin = () => {\n  function replaceElement(path: NodePath<t.JSXElement>, state: State) {\n    const namePath = path.get('openingElement').get('name')\n    if (!namePath.isJSXIdentifier()) return\n    const { name } = namePath.node\n\n    // Replace element by react-native-svg components\n    const component = elementToComponent[name]\n\n    if (component) {\n      namePath.replaceWith(t.jsxIdentifier(component))\n      if (path.has('closingElement')) {\n        const closingNamePath = path\n          .get('closingElement')\n          .get('name') as NodePath<t.JSXIdentifier>\n        closingNamePath.replaceWith(t.jsxIdentifier(component))\n      }\n      state.replacedComponents.add(component)\n      return\n    }\n\n    // Remove element if not supported\n    state.unsupportedComponents.add(name)\n    path.remove()\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path: NodePath<t.JSXElement>, state: State) {\n      if (\n        !path.get('openingElement').get('name').isJSXIdentifier({ name: 'svg' })\n      ) {\n        return\n      }\n\n      replaceElement(path, state)\n      path.traverse(jsxElementVisitor, state)\n    },\n  }\n\n  const jsxElementVisitor = {\n    JSXElement(path: NodePath<t.JSXElement>, state: State) {\n      replaceElement(path, state)\n    },\n  }\n\n  const importDeclarationVisitor = {\n    ImportDeclaration(path: NodePath<t.ImportDeclaration>, state: State) {\n      if (path.get('source').isStringLiteral({ value: 'react-native-svg' })) {\n        state.replacedComponents.forEach((component) => {\n          if (\n            path\n              .get('specifiers')\n              .some((specifier) =>\n                specifier.get('local').isIdentifier({ name: component }),\n              )\n          ) {\n            return\n          }\n\n          path.pushContainer(\n            'specifiers',\n            t.importSpecifier(t.identifier(component), t.identifier(component)),\n          )\n        })\n      } else if (path.get('source').isStringLiteral({ value: 'expo' })) {\n        path.pushContainer(\n          'specifiers',\n          t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')),\n        )\n      } else {\n        return\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ')\n        path.addComment(\n          'trailing',\n          ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `,\n        )\n      }\n    },\n  }\n\n  return {\n    visitor: {\n      Program(path: NodePath<t.Program>, state: Partial<State>) {\n        state.replacedComponents = new Set()\n        state.unsupportedComponents = new Set()\n\n        path.traverse(svgElementVisitor, state as State)\n        path.traverse(importDeclarationVisitor, state as State)\n      },\n    },\n  }\n}\n\nexport default plugin\n"],"names":["t"],"mappings":";;;;AAQA,MAAM,qBAAgD;AAAA,EACpD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,SAAS;AAAA,EACT,GAAG;AAAA,EACH,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,UAAU;AAAA,EACV,OAAO;AAAA,EACP,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,eAAe;AAAA;MAGX,SAAS,MAAM;AACnB,0BAAwB,MAA8B,OAAc;AAClE,UAAM,WAAW,KAAK,IAAI,kBAAkB,IAAI;AAChD,QAAI,CAAC,SAAS;AAAmB;AACjC,UAAM,EAAE,SAAS,SAAS;AAG1B,UAAM,YAAY,mBAAmB;AAErC,QAAI,WAAW;AACb,eAAS,YAAYA,WAAE,cAAc;AACrC,UAAI,KAAK,IAAI,mBAAmB;AAC9B,cAAM,kBAAkB,KACrB,IAAI,kBACJ,IAAI;AACP,wBAAgB,YAAYA,WAAE,cAAc;AAAA;AAE9C,YAAM,mBAAmB,IAAI;AAC7B;AAAA;AAIF,UAAM,sBAAsB,IAAI;AAChC,SAAK;AAAA;AAGP,QAAM,oBAAoB;AAAA,IACxB,WAAW,MAA8B,OAAc;AACrD,UACE,CAAC,KAAK,IAAI,kBAAkB,IAAI,QAAQ,gBAAgB,EAAE,MAAM,UAChE;AACA;AAAA;AAGF,qBAAe,MAAM;AACrB,WAAK,SAAS,mBAAmB;AAAA;AAAA;AAIrC,QAAM,oBAAoB;AAAA,IACxB,WAAW,MAA8B,OAAc;AACrD,qBAAe,MAAM;AAAA;AAAA;AAIzB,QAAM,2BAA2B;AAAA,IAC/B,kBAAkB,MAAqC,OAAc;AACnE,UAAI,KAAK,IAAI,UAAU,gBAAgB,EAAE,OAAO,uBAAuB;AACrE,cAAM,mBAAmB,QAAQ,CAAC,cAAc;AAC9C,cACE,KACG,IAAI,cACJ,KAAK,CAAC,cACL,UAAU,IAAI,SAAS,aAAa,EAAE,MAAM,eAEhD;AACA;AAAA;AAGF,eAAK,cACH,cACAA,WAAE,gBAAgBA,WAAE,WAAW,YAAYA,WAAE,WAAW;AAAA;AAAA,iBAGnD,KAAK,IAAI,UAAU,gBAAgB,EAAE,OAAO,WAAW;AAChE,aAAK,cACH,cACAA,WAAE,gBAAgBA,WAAE,WAAW,QAAQA,WAAE,WAAW;AAAA,aAEjD;AACL;AAAA;AAGF,UAAI,MAAM,sBAAsB,QAAQ,CAAC,KAAK,IAAI,qBAAqB;AACrE,cAAM,gBAAgB,CAAC,GAAG,MAAM,uBAAuB,KAAK;AAC5D,aAAK,WACH,YACA,sEAAsE;AAAA;AAAA;AAAA;AAM9E,SAAO;AAAA,IACL,SAAS;AAAA,MACP,QAAQ,MAA2B,OAAuB;AACxD,cAAM,qBAAqB,IAAI;AAC/B,cAAM,wBAAwB,IAAI;AAElC,aAAK,SAAS,mBAAmB;AACjC,aAAK,SAAS,0BAA0B;AAAA;AAAA;AAAA;AAAA;;;;"}