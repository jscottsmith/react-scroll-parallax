{"version":3,"file":"index.js","sources":["../src/state.ts","../src/config.ts","../src/plugins.ts","../src/transform.ts"],"sourcesContent":["import { parse as parsePath } from 'path'\n// @ts-ignore\nimport camelCase from 'camelcase'\nimport type { ConfigPlugin } from './plugins'\n\nexport interface State {\n  filePath?: string\n  componentName: string\n  caller?: {\n    name?: string\n    previousExport?: string | null\n    defaultPlugins?: ConfigPlugin[]\n  }\n}\n\nconst VALID_CHAR_REGEX = /[^a-zA-Z0-9_-]/g\n\nconst getComponentName = (filePath?: string): string => {\n  if (!filePath) return 'SvgComponent'\n  const pascalCaseFileName = camelCase(\n    parsePath(filePath).name.replace(VALID_CHAR_REGEX, ''),\n    {\n      pascalCase: true,\n    },\n  )\n  return `Svg${pascalCaseFileName}`\n}\n\nexport const expandState = (state: Partial<State>): State => {\n  return {\n    componentName: state.componentName || getComponentName(state.filePath),\n    ...state,\n  }\n}\n","import { cosmiconfig, cosmiconfigSync } from 'cosmiconfig'\nimport type { Options as PrettierOptions } from 'prettier'\nimport type { OptimizeOptions as SvgoOptions } from 'svgo'\nimport type { Options as TransformOptions } from '@svgr/babel-preset'\nimport type { TransformOptions as BabelTransformOptions } from '@babel/core'\nimport type { ConfigPlugin } from './plugins'\nimport type { State } from './state'\n\nexport interface Config {\n  ref?: boolean\n  titleProp?: boolean\n  expandProps?: boolean | 'start' | 'end'\n  dimensions?: boolean\n  icon?: boolean | string | number\n  native?: boolean\n  svgProps?: {\n    [key: string]: string\n  }\n  replaceAttrValues?: {\n    [key: string]: string\n  }\n  runtimeConfig?: boolean\n  typescript?: boolean\n  prettier?: boolean\n  prettierConfig?: PrettierOptions\n  svgo?: boolean\n  svgoConfig?: SvgoOptions\n  configFile?: string\n  template?: TransformOptions['template']\n  memo?: boolean\n  exportType?: 'named' | 'default'\n  namedExport?: string\n  jsxRuntime?: 'classic' | 'classic-preact' | 'automatic'\n\n  // CLI only\n  index?: boolean\n  plugins?: ConfigPlugin[]\n\n  // JSX\n  jsx?: {\n    babelConfig?: BabelTransformOptions\n  }\n}\n\nexport const DEFAULT_CONFIG: Config = {\n  dimensions: true,\n  expandProps: 'end',\n  icon: false,\n  native: false,\n  typescript: false,\n  prettier: true,\n  prettierConfig: undefined,\n  memo: false,\n  ref: false,\n  replaceAttrValues: undefined,\n  svgProps: undefined,\n  svgo: true,\n  svgoConfig: undefined,\n  template: undefined,\n  index: false,\n  titleProp: false,\n  runtimeConfig: true,\n  namedExport: 'ReactComponent',\n  exportType: 'default',\n}\n\nconst explorer = cosmiconfig('svgr')\nconst explorerSync = cosmiconfigSync('svgr')\n\nexport const resolveConfig = async (\n  searchFrom?: string,\n  configFile?: string,\n): Promise<Config | null> => {\n  if (configFile == null) {\n    const result = await explorer.search(searchFrom)\n    return result ? result.config : null\n  }\n  const result = await explorer.load(configFile)\n  return result ? result.config : null\n}\n\nresolveConfig.sync = (\n  searchFrom?: string,\n  configFile?: string,\n): Config | null => {\n  if (configFile == null) {\n    const result = explorerSync.search(searchFrom)\n    return result ? result.config : null\n  }\n  const result = explorerSync.load(configFile)\n  return result ? result.config : null\n}\n\nexport const resolveConfigFile = async (\n  filePath: string,\n): Promise<string | null> => {\n  const result = await explorer.search(filePath)\n  return result ? result.filepath : null\n}\n\nresolveConfigFile.sync = (filePath: string): string | null => {\n  const result = explorerSync.search(filePath)\n  return result ? result.filepath : null\n}\n\nexport const loadConfig = async (\n  { configFile, ...baseConfig }: Config,\n  state: Pick<State, 'filePath'> = {},\n): Promise<Config> => {\n  const rcConfig =\n    state.filePath && baseConfig.runtimeConfig !== false\n      ? await resolveConfig(state.filePath, configFile)\n      : {}\n  return { ...DEFAULT_CONFIG, ...rcConfig, ...baseConfig }\n}\n\nloadConfig.sync = (\n  { configFile, ...baseConfig }: Config,\n  state: Pick<State, 'filePath'> = {},\n): Config => {\n  const rcConfig =\n    state.filePath && baseConfig.runtimeConfig !== false\n      ? resolveConfig.sync(state.filePath, configFile)\n      : {}\n  return { ...DEFAULT_CONFIG, ...rcConfig, ...baseConfig }\n}\n","// @ts-ignore\nimport jsx from '@svgr/plugin-jsx'\nimport { Config } from './config'\nimport type { State } from './state'\n\nexport interface Plugin {\n  (code: string, config: Config, state: State): string\n}\n\nexport type ConfigPlugin = string | Plugin\n\nconst DEFAULT_PLUGINS: Plugin[] = [jsx as any]\n\nexport const getPlugins = (\n  config: Config,\n  state: Partial<State>,\n): ConfigPlugin[] => {\n  if (config.plugins) {\n    return config.plugins\n  }\n\n  if (state.caller?.defaultPlugins) {\n    return state.caller.defaultPlugins\n  }\n\n  return DEFAULT_PLUGINS\n}\n\nexport const resolvePlugin = (plugin: ConfigPlugin): Plugin => {\n  if (typeof plugin === 'function') {\n    return plugin\n  }\n\n  if (typeof plugin === 'string') {\n    return loadPlugin(plugin)\n  }\n\n  throw new Error(`Invalid plugin \"${plugin}\"`)\n}\n\nconst pluginCache: Record<string, Plugin> = {}\n\nconst resolveModule = (m: any) => (m ? m.default || m : null)\n\nexport const loadPlugin = (moduleName: string): Plugin => {\n  if (pluginCache[moduleName]) {\n    return pluginCache[moduleName]\n  }\n\n  try {\n    // eslint-disable-next-line\n    const plugin = resolveModule(require(moduleName))\n    if (!plugin) {\n      throw new Error(`Invalid plugin \"${moduleName}\"`)\n    }\n    pluginCache[moduleName] = plugin\n    return pluginCache[moduleName]\n  } catch (error) {\n    console.log(error)\n    throw new Error(\n      `Module \"${moduleName}\" missing. Maybe \\`npm install ${moduleName}\\` could help!`,\n    )\n  }\n}\n","import { expandState } from './state'\nimport { loadConfig } from './config'\nimport { resolvePlugin, getPlugins } from './plugins'\nimport type { Config } from './config'\nimport type { State } from './state'\n\nconst run = (code: string, config: Config, state: Partial<State>): string => {\n  const expandedState = expandState(state)\n  const plugins = getPlugins(config, state).map(resolvePlugin)\n  let nextCode = String(code).replace('\\0', '')\n  // eslint-disable-next-line no-restricted-syntax\n  for (const plugin of plugins) {\n    nextCode = plugin(nextCode, config, expandedState)\n  }\n  return nextCode\n}\n\nexport const transform = async (\n  code: string,\n  config: Config = {},\n  state: Partial<State> = {},\n): Promise<string> => {\n  config = await loadConfig(config, state)\n  return run(code, config, state)\n}\n\ntransform.sync = (\n  code: string,\n  config: Config = {},\n  state: Partial<State> = {},\n): string => {\n  config = loadConfig.sync(config, state)\n  return run(code, config, state)\n}\n"],"names":["camelCase","parsePath","__spreadValues","cosmiconfig","cosmiconfigSync","jsx"],"mappings":"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"}