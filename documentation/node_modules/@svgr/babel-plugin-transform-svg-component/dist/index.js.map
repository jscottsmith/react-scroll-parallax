{"version":3,"file":"index.js","sources":["../src/defaultTemplate.ts","../src/variables.ts","../src/index.ts"],"sourcesContent":["import type { Template } from './types'\n\nexport const defaultTemplate: Template = (variables, { tpl }) => {\n  return tpl`\n${variables.imports};\n\n${variables.interfaces};\n\nconst ${variables.componentName} = (${variables.props}) => (\n  ${variables.jsx}\n);\n \n${variables.exports};\n`\n}\n","import { types as t, template } from '@babel/core'\nimport type { Options, TemplateVariables, JSXRuntimeImport } from './types'\n\nconst tsOptionalPropertySignature = (\n  ...args: Parameters<typeof t.tsPropertySignature>\n) => {\n  return {\n    ...t.tsPropertySignature(...args),\n    optional: true,\n  } as t.TSPropertySignature\n}\n\ninterface Context {\n  opts: Options\n  interfaces: t.TSInterfaceDeclaration[]\n  props: (t.Identifier | t.ObjectPattern)[]\n  imports: t.ImportDeclaration[]\n  importSource: string\n}\n\nconst getOrCreateImport = ({ imports }: Context, sourceValue: string) => {\n  const existing = imports.find(\n    (imp) =>\n      imp.source.value === sourceValue &&\n      !imp.specifiers.some(\n        (specifier) => specifier.type === 'ImportNamespaceSpecifier',\n      ),\n  )\n  if (existing) return existing\n  const imp = t.importDeclaration([], t.stringLiteral(sourceValue))\n  imports.push(imp)\n  return imp\n}\n\nconst tsTypeReferenceSVGProps = (ctx: Context) => {\n  if (ctx.opts.native) {\n    const identifier = t.identifier('SvgProps')\n    getOrCreateImport(ctx, 'react-native-svg').specifiers.push(\n      t.importSpecifier(identifier, identifier),\n    )\n    return t.tsTypeReference(identifier)\n  }\n  const identifier = t.identifier('SVGProps')\n  getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n    t.importSpecifier(identifier, identifier),\n  )\n  return t.tsTypeReference(\n    identifier,\n    t.tsTypeParameterInstantiation([\n      t.tsTypeReference(t.identifier('SVGSVGElement')),\n    ]),\n  )\n}\n\nconst tsTypeReferenceSVGRef = (ctx: Context) => {\n  const identifier = t.identifier('Ref')\n  getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n    t.importSpecifier(identifier, identifier),\n  )\n  return t.tsTypeReference(\n    identifier,\n    t.tsTypeParameterInstantiation([\n      t.tsTypeReference(t.identifier('SVGSVGElement')),\n    ]),\n  )\n}\n\nconst getJsxRuntimeImport = (cfg: JSXRuntimeImport) => {\n  const specifiers = (() => {\n    if (cfg.namespace)\n      return [t.importNamespaceSpecifier(t.identifier(cfg.namespace))]\n    if (cfg.specifiers)\n      return cfg.specifiers.map((specifier) => {\n        const identifier = t.identifier(specifier)\n        return t.importSpecifier(identifier, identifier)\n      })\n    throw new Error(\n      `Specify either \"namespace\" or \"specifiers\" in \"jsxRuntimeImport\" option`,\n    )\n  })()\n  return t.importDeclaration(specifiers, t.stringLiteral(cfg.source))\n}\n\nconst defaultJsxRuntimeImport: JSXRuntimeImport = {\n  source: 'react',\n  namespace: 'React',\n}\n\nconst defaultImportSource = 'react'\n\nexport const getVariables = ({\n  opts,\n  jsx,\n}: {\n  opts: Options\n  jsx: t.JSXElement\n}): TemplateVariables => {\n  const interfaces: t.TSInterfaceDeclaration[] = []\n  const props: (t.Identifier | t.ObjectPattern)[] = []\n  const imports: t.ImportDeclaration[] = []\n  const exports: (t.VariableDeclaration | t.ExportDeclaration | t.Statement)[] =\n    []\n  const ctx = {\n    importSource: opts.importSource ?? defaultImportSource,\n    exportIdentifier: t.identifier(opts.state.componentName),\n    opts,\n    interfaces,\n    props,\n    imports,\n    exports,\n  }\n\n  if (opts.jsxRuntime !== 'automatic') {\n    imports.push(\n      getJsxRuntimeImport(opts.jsxRuntimeImport ?? defaultJsxRuntimeImport),\n    )\n  }\n\n  if (opts.native) {\n    getOrCreateImport(ctx, 'react-native-svg').specifiers.push(\n      t.importDefaultSpecifier(t.identifier('Svg')),\n    )\n  }\n\n  if (opts.titleProp) {\n    const prop = t.objectPattern([\n      t.objectProperty(\n        t.identifier('title'),\n        t.identifier('title'),\n        false,\n        true,\n      ),\n      t.objectProperty(\n        t.identifier('titleId'),\n        t.identifier('titleId'),\n        false,\n        true,\n      ),\n    ])\n    props.push(prop)\n    if (opts.typescript) {\n      interfaces.push(\n        t.tsInterfaceDeclaration(\n          t.identifier('SVGRProps'),\n          null,\n          null,\n          t.tSInterfaceBody([\n            tsOptionalPropertySignature(\n              t.identifier('title'),\n              t.tsTypeAnnotation(t.tsStringKeyword()),\n            ),\n            tsOptionalPropertySignature(\n              t.identifier('titleId'),\n              t.tsTypeAnnotation(t.tsStringKeyword()),\n            ),\n          ]),\n        ),\n      )\n      prop.typeAnnotation = t.tsTypeAnnotation(\n        t.tsTypeReference(t.identifier('SVGRProps')),\n      )\n    }\n  }\n\n  if (opts.expandProps) {\n    const identifier = t.identifier('props')\n    if (t.isObjectPattern(props[0])) {\n      props[0].properties.push(t.restElement(identifier))\n      if (opts.typescript) {\n        props[0].typeAnnotation = t.tsTypeAnnotation(\n          t.tsIntersectionType([\n            tsTypeReferenceSVGProps(ctx),\n            (props[0].typeAnnotation as t.TSTypeAnnotation).typeAnnotation,\n          ]),\n        )\n      }\n    } else {\n      props.push(identifier)\n      if (opts.typescript) {\n        identifier.typeAnnotation = t.tsTypeAnnotation(\n          tsTypeReferenceSVGProps(ctx),\n        )\n      }\n    }\n  }\n\n  if (opts.ref) {\n    if (props.length === 0) {\n      props.push(t.identifier('_'))\n    }\n    const prop = t.identifier('ref')\n    props.push(prop)\n    if (opts.typescript) {\n      prop.typeAnnotation = t.tsTypeAnnotation(tsTypeReferenceSVGRef(ctx))\n    }\n    const forwardRef = t.identifier('forwardRef')\n    const ForwardRef = t.identifier('ForwardRef')\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      t.importSpecifier(forwardRef, forwardRef),\n    )\n    exports.push(\n      t.variableDeclaration('const', [\n        t.variableDeclarator(\n          ForwardRef,\n          t.callExpression(forwardRef, [ctx.exportIdentifier]),\n        ),\n      ]),\n    )\n    ctx.exportIdentifier = ForwardRef\n  }\n\n  if (opts.memo) {\n    const memo = t.identifier('memo')\n    const Memo = t.identifier('Memo')\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      t.importSpecifier(memo, memo),\n    )\n    exports.push(\n      t.variableDeclaration('const', [\n        t.variableDeclarator(\n          Memo,\n          t.callExpression(memo, [ctx.exportIdentifier]),\n        ),\n      ]),\n    )\n    ctx.exportIdentifier = Memo\n  }\n\n  if (opts.state.caller?.previousExport || opts.exportType === 'named') {\n    if (!opts.namedExport) {\n      throw new Error(`\"namedExport\" not specified`)\n    }\n    exports.push(\n      t.exportNamedDeclaration(null, [\n        t.exportSpecifier(ctx.exportIdentifier, t.identifier(opts.namedExport)),\n      ]),\n    )\n    if (opts.state.caller?.previousExport) {\n      const previousExportAst = template.ast(opts.state.caller.previousExport)\n      exports.push(\n        ...(Array.isArray(previousExportAst)\n          ? previousExportAst\n          : [previousExportAst]),\n      )\n    }\n  } else {\n    exports.push(t.exportDefaultDeclaration(ctx.exportIdentifier))\n  }\n  return {\n    componentName: opts.state.componentName,\n    props,\n    interfaces,\n    imports,\n    exports,\n    jsx,\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  ConfigAPI,\n  NodePath,\n  types as t,\n  template as babelTemplate,\n  ParserOptions,\n} from '@babel/core'\nimport type { Options } from './types'\nimport { defaultTemplate } from './defaultTemplate'\nimport { getVariables } from './variables'\n\nexport type { Options, Template } from './types'\n\nconst plugin = (_: ConfigAPI, opts: Options) => {\n  const template = opts.template || defaultTemplate\n  const plugins: ParserOptions['plugins'] = opts.typescript\n    ? ['jsx', 'typescript']\n    : ['jsx']\n  const tpl = babelTemplate.smart({ plugins, preserveComments: true }).ast\n  return {\n    visitor: {\n      Program(path: NodePath<t.Program>) {\n        const jsx = (path.node.body[0] as t.ExpressionStatement)\n          .expression as t.JSXElement\n        const variables = getVariables({\n          opts,\n          jsx,\n        })\n        const body = template(variables, { options: opts, tpl })\n        path.node.body = Array.isArray(body) ? body : [body]\n        path.replaceWith(path.node)\n      },\n    },\n  }\n}\n\nexport default plugin\n"],"names":["t","template","babelTemplate"],"mappings":"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"}