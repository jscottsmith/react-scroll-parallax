{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ConfigAPI, types as t, NodePath, template } from '@babel/core'\n\nexport interface Value {\n  value: string\n  newValue: string | boolean | number\n  literal?: boolean\n}\n\nexport interface Options {\n  values: Value[]\n}\n\nconst addJSXAttribute = (api: ConfigAPI, opts: Options) => {\n  const getAttributeValue = (\n    value: string | boolean | number,\n    literal?: boolean,\n  ) => {\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(\n        (template.ast(value) as t.ExpressionStatement).expression,\n      )\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value)\n    }\n\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value))\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value))\n    }\n\n    return null\n  }\n\n  return {\n    visitor: {\n      JSXAttribute(path: NodePath<t.JSXAttribute>) {\n        const valuePath = path.get('value')\n        if (!valuePath.isStringLiteral()) return\n\n        opts.values.forEach(({ value, newValue, literal }) => {\n          if (!valuePath.isStringLiteral({ value })) return\n          const attributeValue = getAttributeValue(newValue, literal)\n          if (attributeValue) {\n            valuePath.replaceWith(attributeValue)\n          }\n        })\n      },\n    },\n  }\n}\n\nexport default addJSXAttribute\n"],"names":["t","template"],"mappings":";;;;MAaM,kBAAkB,CAAC,KAAgB,SAAkB;AACzD,QAAM,oBAAoB,CACxB,OACA,YACG;AACH,QAAI,OAAO,UAAU,YAAY,SAAS;AACxC,aAAOA,WAAE,uBACNC,cAAS,IAAI,OAAiC;AAAA;AAInD,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAOD,WAAE,cAAc;AAAA;AAGzB,QAAI,OAAO,UAAU,WAAW;AAC9B,aAAOA,WAAE,uBAAuBA,WAAE,eAAe;AAAA;AAGnD,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAOA,WAAE,uBAAuBA,WAAE,eAAe;AAAA;AAGnD,WAAO;AAAA;AAGT,SAAO;AAAA,IACL,SAAS;AAAA,MACP,aAAa,MAAgC;AAC3C,cAAM,YAAY,KAAK,IAAI;AAC3B,YAAI,CAAC,UAAU;AAAmB;AAElC,aAAK,OAAO,QAAQ,CAAC,EAAE,OAAO,UAAU,cAAc;AACpD,cAAI,CAAC,UAAU,gBAAgB,EAAE;AAAU;AAC3C,gBAAM,iBAAiB,kBAAkB,UAAU;AACnD,cAAI,gBAAgB;AAClB,sBAAU,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;"}