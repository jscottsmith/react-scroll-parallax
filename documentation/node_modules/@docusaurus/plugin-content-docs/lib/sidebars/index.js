"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSidebars = exports.loadNormalizedSidebars = exports.loadSidebarsFile = exports.resolveSidebarPathOption = exports.DisabledSidebars = exports.DefaultSidebars = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = (0, tslib_1.__importDefault)(require("fs-extra"));
const import_fresh_1 = (0, tslib_1.__importDefault)(require("import-fresh"));
const validation_1 = require("./validation");
const normalization_1 = require("./normalization");
const processor_1 = require("./processor");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const utils_1 = require("@docusaurus/utils");
exports.DefaultSidebars = {
    defaultSidebar: [
        {
            type: 'autogenerated',
            dirName: '.',
        },
    ],
};
exports.DisabledSidebars = {};
// If a path is provided, make it absolute
// use this before loadSidebars()
function resolveSidebarPathOption(siteDir, sidebarPathOption) {
    return sidebarPathOption
        ? path_1.default.resolve(siteDir, sidebarPathOption)
        : sidebarPathOption;
}
exports.resolveSidebarPathOption = resolveSidebarPathOption;
function loadSidebarsFileUnsafe(sidebarFilePath) {
    // false => no sidebars
    if (sidebarFilePath === false) {
        return exports.DisabledSidebars;
    }
    // undefined => defaults to autogenerated sidebars
    if (typeof sidebarFilePath === 'undefined') {
        return exports.DefaultSidebars;
    }
    // Non-existent sidebars file: no sidebars
    // Note: this edge case can happen on versioned docs, not current version
    // We avoid creating empty versioned sidebars file with the CLI
    if (!fs_extra_1.default.existsSync(sidebarFilePath)) {
        return exports.DisabledSidebars;
    }
    // We don't want sidebars to be cached because of hot reloading.
    return (0, import_fresh_1.default)(sidebarFilePath);
}
function loadSidebarsFile(sidebarFilePath) {
    const sidebarsConfig = loadSidebarsFileUnsafe(sidebarFilePath);
    (0, validation_1.validateSidebars)(sidebarsConfig);
    return sidebarsConfig;
}
exports.loadSidebarsFile = loadSidebarsFile;
function loadNormalizedSidebars(sidebarFilePath, params) {
    return (0, normalization_1.normalizeSidebars)(loadSidebarsFile(sidebarFilePath), params);
}
exports.loadNormalizedSidebars = loadNormalizedSidebars;
// Note: sidebarFilePath must be absolute, use resolveSidebarPathOption
async function loadSidebars(sidebarFilePath, options) {
    const normalizeSidebarsParams = {
        ...options.sidebarOptions,
        version: options.version,
        categoryLabelSlugger: (0, utils_1.createSlugger)(),
    };
    const normalizedSidebars = loadNormalizedSidebars(sidebarFilePath, normalizeSidebarsParams);
    return (0, processor_1.processSidebars)(normalizedSidebars, options);
}
exports.loadSidebars = loadSidebars;
