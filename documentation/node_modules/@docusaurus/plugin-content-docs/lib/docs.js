"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDocsByIdIndex = exports.getDocIds = exports.isConventionalDocIndex = exports.getMainDocId = exports.addDocNavigation = exports.processDocMetadata = exports.readVersionDocs = exports.readDocFile = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const fs_extra_1 = (0, tslib_1.__importDefault)(require("fs-extra"));
const logger_1 = (0, tslib_1.__importDefault)(require("@docusaurus/logger"));
const lodash_1 = require("lodash");
const utils_1 = require("@docusaurus/utils");
const lastUpdate_1 = require("./lastUpdate");
const slug_1 = (0, tslib_1.__importDefault)(require("./slug"));
const constants_1 = require("./constants");
const versions_1 = require("./versions");
const numberPrefix_1 = require("./numberPrefix");
const docFrontMatter_1 = require("./docFrontMatter");
const utils_2 = require("./sidebars/utils");
async function readLastUpdateData(filePath, options) {
    const { showLastUpdateAuthor, showLastUpdateTime } = options;
    if (showLastUpdateAuthor || showLastUpdateTime) {
        // Use fake data in dev for faster development.
        const fileLastUpdateData = process.env.NODE_ENV === 'production'
            ? await (0, lastUpdate_1.getFileLastUpdate)(filePath)
            : {
                author: 'Author',
                timestamp: 1539502055,
            };
        if (fileLastUpdateData) {
            const { author, timestamp } = fileLastUpdateData;
            return {
                lastUpdatedAt: showLastUpdateTime ? timestamp : undefined,
                lastUpdatedBy: showLastUpdateAuthor ? author : undefined,
            };
        }
    }
    return {};
}
async function readDocFile(versionMetadata, source, options) {
    const contentPath = await (0, utils_1.getFolderContainingFile)((0, versions_1.getDocsDirPaths)(versionMetadata), source);
    const filePath = path_1.default.join(contentPath, source);
    const [content, lastUpdate] = await Promise.all([
        fs_extra_1.default.readFile(filePath, 'utf-8'),
        readLastUpdateData(filePath, options),
    ]);
    return { source, content, lastUpdate, contentPath, filePath };
}
exports.readDocFile = readDocFile;
async function readVersionDocs(versionMetadata, options) {
    const sources = await (0, utils_1.Globby)(options.include, {
        cwd: versionMetadata.contentPath,
        ignore: options.exclude,
    });
    return Promise.all(sources.map((source) => readDocFile(versionMetadata, source, options)));
}
exports.readVersionDocs = readVersionDocs;
function doProcessDocMetadata({ docFile, versionMetadata, context, options, }) {
    var _a, _b, _c, _d, _e, _f;
    const { source, content, lastUpdate, contentPath, filePath } = docFile;
    const { siteDir, i18n } = context;
    const { frontMatter: unsafeFrontMatter, contentTitle, excerpt, } = (0, utils_1.parseMarkdownString)(content);
    const frontMatter = (0, docFrontMatter_1.validateDocFrontMatter)(unsafeFrontMatter);
    const { custom_edit_url: customEditURL, 
    // Strip number prefixes by default (01-MyFolder/01-MyDoc.md => MyFolder/MyDoc) by default,
    // but allow to disable this behavior with frontmatter
    parse_number_prefixes: parseNumberPrefixes = true, } = frontMatter;
    // ex: api/plugins/myDoc -> myDoc
    // ex: myDoc -> myDoc
    const sourceFileNameWithoutExtension = path_1.default.basename(source, path_1.default.extname(source));
    // ex: api/plugins/myDoc -> api/plugins
    // ex: myDoc -> .
    const sourceDirName = path_1.default.dirname(source);
    const { filename: unprefixedFileName, numberPrefix } = parseNumberPrefixes
        ? options.numberPrefixParser(sourceFileNameWithoutExtension)
        : { filename: sourceFileNameWithoutExtension, numberPrefix: undefined };
    const baseID = (_a = frontMatter.id) !== null && _a !== void 0 ? _a : unprefixedFileName;
    if (baseID.includes('/')) {
        throw new Error(`Document id "${baseID}" cannot include slash.`);
    }
    // For autogenerated sidebars, sidebar position can come from filename number prefix or frontmatter
    const sidebarPosition = (_b = frontMatter.sidebar_position) !== null && _b !== void 0 ? _b : numberPrefix;
    // TODO legacy retrocompatibility
    // The same doc in 2 distinct version could keep the same id,
    // we just need to namespace the data by version
    const versionIdPrefix = versionMetadata.versionName === constants_1.CURRENT_VERSION_NAME
        ? undefined
        : `version-${versionMetadata.versionName}`;
    // TODO legacy retrocompatibility
    // I think it's bad to affect the frontmatter id with the dirname?
    function computeDirNameIdPrefix() {
        if (sourceDirName === '.') {
            return undefined;
        }
        // Eventually remove the number prefixes from intermediate directories
        return parseNumberPrefixes
            ? (0, numberPrefix_1.stripPathNumberPrefixes)(sourceDirName, options.numberPrefixParser)
            : sourceDirName;
    }
    const unversionedId = [computeDirNameIdPrefix(), baseID]
        .filter(Boolean)
        .join('/');
    // TODO is versioning the id very useful in practice?
    // legacy versioned id, requires a breaking change to modify this
    const id = [versionIdPrefix, unversionedId].filter(Boolean).join('/');
    const docSlug = (0, slug_1.default)({
        baseID,
        source,
        sourceDirName,
        frontmatterSlug: frontMatter.slug,
        stripDirNumberPrefixes: parseNumberPrefixes,
        numberPrefixParser: options.numberPrefixParser,
    });
    // Note: the title is used by default for page title, sidebar label, pagination buttons...
    // frontMatter.title should be used in priority over contentTitle (because it can contain markdown/JSX syntax)
    const title = (_d = (_c = frontMatter.title) !== null && _c !== void 0 ? _c : contentTitle) !== null && _d !== void 0 ? _d : baseID;
    const description = (_f = (_e = frontMatter.description) !== null && _e !== void 0 ? _e : excerpt) !== null && _f !== void 0 ? _f : '';
    const permalink = (0, utils_1.normalizeUrl)([versionMetadata.versionPath, docSlug]);
    function getDocEditUrl() {
        const relativeFilePath = path_1.default.relative(contentPath, filePath);
        if (typeof options.editUrl === 'function') {
            return options.editUrl({
                version: versionMetadata.versionName,
                versionDocsDirPath: (0, utils_1.posixPath)(path_1.default.relative(siteDir, versionMetadata.contentPath)),
                docPath: (0, utils_1.posixPath)(relativeFilePath),
                permalink,
                locale: context.i18n.currentLocale,
            });
        }
        else if (typeof options.editUrl === 'string') {
            const isLocalized = contentPath === versionMetadata.contentPathLocalized;
            const baseVersionEditUrl = isLocalized && options.editLocalizedFiles
                ? versionMetadata.versionEditUrlLocalized
                : versionMetadata.versionEditUrl;
            return (0, utils_1.getEditUrl)(relativeFilePath, baseVersionEditUrl);
        }
        else {
            return undefined;
        }
    }
    // Assign all of object properties during instantiation (if possible) for
    // NodeJS optimization.
    // Adding properties to object after instantiation will cause hidden
    // class transitions.
    return {
        unversionedId,
        id,
        title,
        description,
        source: (0, utils_1.aliasedSitePath)(filePath, siteDir),
        sourceDirName,
        slug: docSlug,
        permalink,
        editUrl: customEditURL !== undefined ? customEditURL : getDocEditUrl(),
        tags: (0, utils_1.normalizeFrontMatterTags)(versionMetadata.tagsPath, frontMatter.tags),
        version: versionMetadata.versionName,
        lastUpdatedBy: lastUpdate.lastUpdatedBy,
        lastUpdatedAt: lastUpdate.lastUpdatedAt,
        formattedLastUpdatedAt: lastUpdate.lastUpdatedAt
            ? new Intl.DateTimeFormat(i18n.currentLocale).format(lastUpdate.lastUpdatedAt * 1000)
            : undefined,
        sidebarPosition,
        frontMatter,
    };
}
function processDocMetadata(args) {
    try {
        return doProcessDocMetadata(args);
    }
    catch (e) {
        logger_1.default.error `Can't process doc metadata for doc at path path=${args.docFile.filePath} in version name=${args.versionMetadata.versionName}`;
        throw e;
    }
}
exports.processDocMetadata = processDocMetadata;
function addDocNavigation(docsBase, sidebarsUtils, sidebarFilePath) {
    const docsById = createDocsByIdIndex(docsBase);
    sidebarsUtils.checkSidebarsDocIds(docsBase.flatMap(getDocIds), sidebarFilePath);
    // Add sidebar/next/previous to the docs
    function addNavData(doc) {
        const navigation = sidebarsUtils.getDocNavigation(doc.unversionedId, doc.id);
        const toNavigationLinkByDocId = (docId, type) => {
            if (!docId) {
                return undefined;
            }
            const navDoc = docsById[docId];
            if (!navDoc) {
                // This could only happen if user provided the ID through front matter
                throw new Error(`Error when loading ${doc.id} in ${doc.sourceDirName}: the pagination_${type} front matter points to a non-existent ID ${docId}.`);
            }
            return (0, utils_2.toDocNavigationLink)(navDoc);
        };
        const previous = doc.frontMatter.pagination_prev !== undefined
            ? toNavigationLinkByDocId(doc.frontMatter.pagination_prev, 'prev')
            : (0, utils_2.toNavigationLink)(navigation.previous, docsById);
        const next = doc.frontMatter.pagination_next !== undefined
            ? toNavigationLinkByDocId(doc.frontMatter.pagination_next, 'next')
            : (0, utils_2.toNavigationLink)(navigation.next, docsById);
        return { ...doc, sidebar: navigation.sidebarName, previous, next };
    }
    const docsWithNavigation = docsBase.map(addNavData);
    // sort to ensure consistent output for tests
    docsWithNavigation.sort((a, b) => a.id.localeCompare(b.id));
    return docsWithNavigation;
}
exports.addDocNavigation = addDocNavigation;
/**
 * The "main doc" is the "version entry point"
 * We browse this doc by clicking on a version:
 * - the "home" doc (at '/docs/')
 * - the first doc of the first sidebar
 * - a random doc (if no docs are in any sidebar... edge case)
 */
function getMainDocId({ docs, sidebarsUtils, }) {
    function getMainDoc() {
        const versionHomeDoc = docs.find((doc) => doc.slug === '/');
        const firstDocIdOfFirstSidebar = sidebarsUtils.getFirstDocIdOfFirstSidebar();
        if (versionHomeDoc) {
            return versionHomeDoc;
        }
        else if (firstDocIdOfFirstSidebar) {
            return docs.find((doc) => doc.id === firstDocIdOfFirstSidebar ||
                doc.unversionedId === firstDocIdOfFirstSidebar);
        }
        else {
            return docs[0];
        }
    }
    return getMainDoc().unversionedId;
}
exports.getMainDocId = getMainDocId;
function getLastPathSegment(str) {
    return (0, lodash_1.last)(str.split('/'));
}
// By convention, Docusaurus considers some docs are "indexes":
// - index.md
// - readme.md
// - <folder>/<folder>.md
//
// Those index docs produce a different behavior
// - Slugs do not end with a weird "/index" suffix
// - Auto-generated sidebar categories link to them as intro
function isConventionalDocIndex(doc) {
    // "@site/docs/folder/subFolder/subSubFolder/myDoc.md" => "myDoc"
    const docName = path_1.default.parse(doc.source).name;
    // "folder/subFolder/subSubFolder" => "subSubFolder"
    const lastDirName = getLastPathSegment(doc.sourceDirName);
    const eligibleDocIndexNames = ['index', 'readme', lastDirName.toLowerCase()];
    return eligibleDocIndexNames.includes(docName.toLowerCase());
}
exports.isConventionalDocIndex = isConventionalDocIndex;
// Return both doc ids
// TODO legacy retro-compatibility due to old versioned sidebars using versioned doc ids
// ("id" should be removed & "versionedId" should be renamed to "id")
function getDocIds(doc) {
    return [doc.unversionedId, doc.id];
}
exports.getDocIds = getDocIds;
// docs are indexed by both versioned and unversioned ids at the same time
// TODO legacy retro-compatibility due to old versioned sidebars using versioned doc ids
// ("id" should be removed & "versionedId" should be renamed to "id")
function createDocsByIdIndex(docs) {
    return {
        ...(0, lodash_1.keyBy)(docs, (doc) => doc.unversionedId),
        ...(0, lodash_1.keyBy)(docs, (doc) => doc.id),
    };
}
exports.createDocsByIdIndex = createDocsByIdIndex;
