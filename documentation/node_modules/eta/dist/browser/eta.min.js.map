{"version":3,"file":"eta.min.js","sources":["../../src/err.ts","../../src/polyfills.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\r\n  // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  if (Object.setPrototypeOf) {\r\n    Object.setPrototypeOf(obj, proto)\r\n  } else {\r\n    obj.__proto__ = proto\r\n  }\r\n}\r\n\r\n// This is pretty much the only way to get nice, extended Errors\r\n// without using ES6\r\n\r\n/**\r\n * This returns a new Error with a custom prototype. Note that it's _not_ a constructor\r\n *\r\n * @param message Error message\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * throw EtaErr(\"template not found\")\r\n * ```\r\n */\r\n\r\nexport default function EtaErr(message: string): Error {\r\n  const err = new Error(message)\r\n  setPrototypeOf(err, EtaErr.prototype)\r\n  return err\r\n}\r\n\r\nEtaErr.prototype = Object.create(Error.prototype, {\r\n  name: { value: 'Eta Error', enumerable: false }\r\n})\r\n\r\n/**\r\n * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.\r\n */\r\n\r\nexport function ParseErr(message: string, str: string, indx: number): void {\r\n  const whitespace = str.slice(0, indx).split(/\\n/)\r\n\r\n  const lineNo = whitespace.length\r\n  const colNo = whitespace[lineNo - 1].length + 1\r\n  message +=\r\n    ' at line ' +\r\n    lineNo +\r\n    ' col ' +\r\n    colNo +\r\n    ':\\n\\n' +\r\n    '  ' +\r\n    str.split(/\\n/)[lineNo - 1] +\r\n    '\\n' +\r\n    '  ' +\r\n    Array(colNo).join(' ') +\r\n    '^'\r\n  throw EtaErr(message)\r\n}\r\n","import EtaErr from './err'\r\n\r\n/**\r\n * @returns The global Promise function\r\n */\r\n\r\nexport const promiseImpl: PromiseConstructor = new Function('return this')().Promise\r\n\r\n/**\r\n * @returns A new AsyncFunction constuctor\r\n */\r\n\r\nexport function getAsyncFunctionConstructor(): Function {\r\n  try {\r\n    return new Function('return (async function(){}).constructor')()\r\n  } catch (e) {\r\n    if (e instanceof SyntaxError) {\r\n      throw EtaErr(\"This environment doesn't support async/await\")\r\n    } else {\r\n      throw e\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * str.trimLeft polyfill\r\n *\r\n * @param str - Input string\r\n * @returns The string with left whitespace removed\r\n *\r\n */\r\n\r\nexport function trimLeft(str: string): string {\r\n  // eslint-disable-next-line no-extra-boolean-cast\r\n  if (!!String.prototype.trimLeft) {\r\n    return str.trimLeft()\r\n  } else {\r\n    return str.replace(/^\\s+/, '')\r\n  }\r\n}\r\n\r\n/**\r\n * str.trimRight polyfill\r\n *\r\n * @param str - Input string\r\n * @returns The string with right whitespace removed\r\n *\r\n */\r\n\r\nexport function trimRight(str: string): string {\r\n  // eslint-disable-next-line no-extra-boolean-cast\r\n  if (!!String.prototype.trimRight) {\r\n    return str.trimRight()\r\n  } else {\r\n    return str.replace(/\\s+$/, '') // TODO: do we really need to replace BOM's?\r\n  }\r\n}\r\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\r\n// TODO: only include trimLeft polyfill if not in ES6\r\n\r\nimport { trimLeft, trimRight } from './polyfills'\r\n\r\n/* TYPES */\r\n\r\nimport type { EtaConfig } from './config'\r\n\r\ninterface EscapeMap {\r\n  '&': '&amp;'\r\n  '<': '&lt;'\r\n  '>': '&gt;'\r\n  '\"': '&quot;'\r\n  \"'\": '&#39;'\r\n  [index: string]: string\r\n}\r\n\r\n/* END TYPES */\r\n\r\nexport function hasOwnProp(obj: object, prop: string): boolean {\r\n  return Object.prototype.hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport function copyProps<T>(toObj: T, fromObj: T): T {\r\n  for (const key in fromObj) {\r\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\r\n      toObj[key] = fromObj[key]\r\n    }\r\n  }\r\n  return toObj\r\n}\r\n\r\n/**\r\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\r\n */\r\n\r\nfunction trimWS(\r\n  str: string,\r\n  config: EtaConfig,\r\n  wsLeft: string | false,\r\n  wsRight?: string | false\r\n): string {\r\n  let leftTrim\r\n  let rightTrim\r\n\r\n  if (Array.isArray(config.autoTrim)) {\r\n    // kinda confusing\r\n    // but _}} will trim the left side of the following string\r\n    leftTrim = config.autoTrim[1]\r\n    rightTrim = config.autoTrim[0]\r\n  } else {\r\n    leftTrim = rightTrim = config.autoTrim\r\n  }\r\n\r\n  if (wsLeft || wsLeft === false) {\r\n    leftTrim = wsLeft\r\n  }\r\n\r\n  if (wsRight || wsRight === false) {\r\n    rightTrim = wsRight\r\n  }\r\n\r\n  if (!rightTrim && !leftTrim) {\r\n    return str\r\n  }\r\n\r\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\r\n    return str.trim()\r\n  }\r\n\r\n  if (leftTrim === '_' || leftTrim === 'slurp') {\r\n    // console.log('trimming left' + leftTrim)\r\n    // full slurp\r\n\r\n    str = trimLeft(str)\r\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\r\n    // nl trim\r\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, '')\r\n  }\r\n\r\n  if (rightTrim === '_' || rightTrim === 'slurp') {\r\n    // full slurp\r\n    str = trimRight(str)\r\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\r\n    // nl trim\r\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, '') // TODO: make sure this gets \\r\\n\r\n  }\r\n\r\n  return str\r\n}\r\n\r\n/**\r\n * A map of special HTML characters to their XML-escaped equivalents\r\n */\r\n\r\nconst escMap: EscapeMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;'\r\n}\r\n\r\nfunction replaceChar(s: string): string {\r\n  return escMap[s]\r\n}\r\n\r\n/**\r\n * XML-escapes an input value after converting it to a string\r\n *\r\n * @param str - Input value (usually a string)\r\n * @returns XML-escaped string\r\n */\r\n\r\nfunction XMLEscape(str: any): string {\r\n  // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\r\n  const newStr = String(str)\r\n  if (/[&<>\"']/.test(newStr)) {\r\n    return newStr.replace(/[&<>\"']/g, replaceChar)\r\n  } else {\r\n    return newStr\r\n  }\r\n}\r\n\r\nexport { trimWS, XMLEscape }\r\n","import { ParseErr } from './err'\r\nimport { trimWS } from './utils'\r\n\r\n/* TYPES */\r\n\r\nimport type { EtaConfig } from './config'\r\n\r\nexport type TagType = 'r' | 'e' | 'i' | ''\r\n\r\nexport interface TemplateObject {\r\n  t: TagType\r\n  val: string\r\n}\r\n\r\nexport type AstObject = string | TemplateObject\r\n\r\n/* END TYPES */\r\n\r\nconst templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g\r\n\r\nconst singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g\r\n\r\nconst doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g\r\n\r\n/** Escape special regular expression characters inside a string */\r\n\r\nfunction escapeRegExp(string: string) {\r\n  // From MDN\r\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport default function parse(str: string, config: EtaConfig): Array<AstObject> {\r\n  let buffer: Array<AstObject> = []\r\n  let trimLeftOfNextStr: string | false = false\r\n  let lastIndex = 0\r\n  const parseOptions = config.parse\r\n\r\n  if (config.plugins) {\r\n    for (let i = 0; i < config.plugins.length; i++) {\r\n      const plugin = config.plugins[i]\r\n      if (plugin.processTemplate) {\r\n        str = plugin.processTemplate(str, config)\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Adding for EJS compatibility */\r\n  if (config.rmWhitespace) {\r\n    // Code taken directly from EJS\r\n    // Have to use two separate replaces here as `^` and `$` operators don't\r\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\r\n    // Essentially, this replaces the whitespace at the beginning and end of\r\n    // each line and removes multiple newlines.\r\n    str = str.replace(/[\\r\\n]+/g, '\\n').replace(/^\\s+|\\s+$/gm, '')\r\n  }\r\n  /* End rmWhitespace option */\r\n\r\n  templateLitReg.lastIndex = 0\r\n  singleQuoteReg.lastIndex = 0\r\n  doubleQuoteReg.lastIndex = 0\r\n\r\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\r\n    if (strng) {\r\n      // if string is truthy it must be of type 'string'\r\n\r\n      strng = trimWS(\r\n        strng,\r\n        config,\r\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\r\n        shouldTrimRightOfString\r\n      )\r\n\r\n      if (strng) {\r\n        // replace \\ with \\\\, ' with \\'\r\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\r\n\r\n        strng = strng.replace(/\\\\|'/g, '\\\\$&').replace(/\\r\\n|\\n|\\r/g, '\\\\n')\r\n\r\n        buffer.push(strng)\r\n      }\r\n    }\r\n  }\r\n\r\n  const prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\r\n    accumulator,\r\n    prefix\r\n  ) {\r\n    if (accumulator && prefix) {\r\n      return accumulator + '|' + escapeRegExp(prefix)\r\n    } else if (prefix) {\r\n      // accumulator is falsy\r\n      return escapeRegExp(prefix)\r\n    } else {\r\n      // prefix and accumulator are both falsy\r\n      return accumulator\r\n    }\r\n  },\r\n  '')\r\n\r\n  const parseOpenReg = new RegExp(\r\n    '([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\\\s*(' + prefixes + ')?\\\\s*',\r\n    'g'\r\n  )\r\n\r\n  const parseCloseReg = new RegExp(\r\n    '\\'|\"|`|\\\\/\\\\*|(\\\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')',\r\n    'g'\r\n  )\r\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\r\n\r\n  let m\r\n\r\n  while ((m = parseOpenReg.exec(str))) {\r\n    lastIndex = m[0].length + m.index\r\n\r\n    const precedingString = m[1]\r\n    const wsLeft = m[2]\r\n    const prefix = m[3] || '' // by default either ~, =, or empty\r\n\r\n    pushString(precedingString, wsLeft)\r\n\r\n    parseCloseReg.lastIndex = lastIndex\r\n    let closeTag\r\n    let currentObj: AstObject | false = false\r\n\r\n    while ((closeTag = parseCloseReg.exec(str))) {\r\n      if (closeTag[1]) {\r\n        let content = str.slice(lastIndex, closeTag.index)\r\n\r\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\r\n\r\n        trimLeftOfNextStr = closeTag[2]\r\n\r\n        const currentType: TagType =\r\n          prefix === parseOptions.exec\r\n            ? 'e'\r\n            : prefix === parseOptions.raw\r\n            ? 'r'\r\n            : prefix === parseOptions.interpolate\r\n            ? 'i'\r\n            : ''\r\n\r\n        currentObj = { t: currentType, val: content }\r\n        break\r\n      } else {\r\n        const char = closeTag[0]\r\n        if (char === '/*') {\r\n          const commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex)\r\n\r\n          if (commentCloseInd === -1) {\r\n            ParseErr('unclosed comment', str, closeTag.index)\r\n          }\r\n          parseCloseReg.lastIndex = commentCloseInd\r\n        } else if (char === \"'\") {\r\n          singleQuoteReg.lastIndex = closeTag.index\r\n\r\n          const singleQuoteMatch = singleQuoteReg.exec(str)\r\n          if (singleQuoteMatch) {\r\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex\r\n          } else {\r\n            ParseErr('unclosed string', str, closeTag.index)\r\n          }\r\n        } else if (char === '\"') {\r\n          doubleQuoteReg.lastIndex = closeTag.index\r\n          const doubleQuoteMatch = doubleQuoteReg.exec(str)\r\n\r\n          if (doubleQuoteMatch) {\r\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex\r\n          } else {\r\n            ParseErr('unclosed string', str, closeTag.index)\r\n          }\r\n        } else if (char === '`') {\r\n          templateLitReg.lastIndex = closeTag.index\r\n          const templateLitMatch = templateLitReg.exec(str)\r\n          if (templateLitMatch) {\r\n            parseCloseReg.lastIndex = templateLitReg.lastIndex\r\n          } else {\r\n            ParseErr('unclosed string', str, closeTag.index)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (currentObj) {\r\n      buffer.push(currentObj)\r\n    } else {\r\n      ParseErr('unclosed tag', str, m.index + precedingString.length)\r\n    }\r\n  }\r\n\r\n  pushString(str.slice(lastIndex, str.length), false)\r\n\r\n  if (config.plugins) {\r\n    for (let i = 0; i < config.plugins.length; i++) {\r\n      const plugin = config.plugins[i]\r\n      if (plugin.processAST) {\r\n        buffer = plugin.processAST(buffer, config)\r\n      }\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n","import Parse from './parse'\r\n\r\n/* TYPES */\r\n\r\nimport type { EtaConfig } from './config'\r\nimport type { AstObject } from './parse'\r\n\r\n/* END TYPES */\r\n\r\n/**\r\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * compileToString(\"Hi <%= it.user %>\", eta.config)\r\n * // \"var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\"\r\n * ```\r\n */\r\n\r\nexport default function compileToString(str: string, config: EtaConfig): string {\r\n  const buffer: Array<AstObject> = Parse(str, config)\r\n\r\n  let res =\r\n    \"var tR='',__l,__lP\" +\r\n    (config.include ? ',include=E.include.bind(E)' : '') +\r\n    (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +\r\n    '\\nfunction layout(p,d){__l=p;__lP=d}\\n' +\r\n    (config.useWith ? 'with(' + config.varName + '||{}){' : '') +\r\n    compileScope(buffer, config) +\r\n    (config.includeFile\r\n      ? 'if(__l)tR=' +\r\n        (config.async ? 'await ' : '') +\r\n        `includeFile(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\r\n      : config.include\r\n      ? 'if(__l)tR=' +\r\n        (config.async ? 'await ' : '') +\r\n        `include(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\r\n      : '') +\r\n    'if(cb){cb(null,tR)} return tR' +\r\n    (config.useWith ? '}' : '')\r\n\r\n  if (config.plugins) {\r\n    for (let i = 0; i < config.plugins.length; i++) {\r\n      const plugin = config.plugins[i]\r\n      if (plugin.processFnString) {\r\n        res = plugin.processFnString(res, config)\r\n      }\r\n    }\r\n  }\r\n\r\n  return res\r\n}\r\n\r\n/**\r\n * Loops through the AST generated by `parse` and transform each item into JS calls\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * // AST version of 'Hi <%= it.user %>'\r\n * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]\r\n * compileScope(templateAST, eta.config)\r\n * // \"tR+='Hi ';tR+=E.e(it.user);\"\r\n * ```\r\n */\r\n\r\nfunction compileScope(buff: Array<AstObject>, config: EtaConfig) {\r\n  let i = 0\r\n  const buffLength = buff.length\r\n  let returnStr = ''\r\n\r\n  for (i; i < buffLength; i++) {\r\n    const currentBlock = buff[i]\r\n    if (typeof currentBlock === 'string') {\r\n      const str = currentBlock\r\n\r\n      // we know string exists\r\n      returnStr += \"tR+='\" + str + \"'\\n\"\r\n    } else {\r\n      const type = currentBlock.t // ~, s, !, ?, r\r\n      let content = currentBlock.val || ''\r\n\r\n      if (type === 'r') {\r\n        // raw\r\n\r\n        if (config.filter) {\r\n          content = 'E.filter(' + content + ')'\r\n        }\r\n\r\n        returnStr += 'tR+=' + content + '\\n'\r\n      } else if (type === 'i') {\r\n        // interpolate\r\n\r\n        if (config.filter) {\r\n          content = 'E.filter(' + content + ')'\r\n        }\r\n\r\n        if (config.autoEscape) {\r\n          content = 'E.e(' + content + ')'\r\n        }\r\n        returnStr += 'tR+=' + content + '\\n'\r\n        // reference\r\n      } else if (type === 'e') {\r\n        // execute\r\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\r\n      }\r\n    }\r\n  }\r\n\r\n  return returnStr\r\n}\r\n","import { copyProps } from './utils'\r\n\r\n/**\r\n * Handles storage and accessing of values\r\n *\r\n * In this case, we use it to store compiled template functions\r\n * Indexed by their `name` or `filename`\r\n */\r\nclass Cacher<T> {\r\n  constructor(private cache: Record<string, T>) {}\r\n  define(key: string, val: T): void {\r\n    this.cache[key] = val\r\n  }\r\n  get(key: string): T {\r\n    // string | array.\r\n    // TODO: allow array of keys to look down\r\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\r\n    return this.cache[key]\r\n  }\r\n  remove(key: string): void {\r\n    delete this.cache[key]\r\n  }\r\n  reset(): void {\r\n    this.cache = {}\r\n  }\r\n  load(cacheObj: Record<string, T>): void {\r\n    copyProps(this.cache, cacheObj)\r\n  }\r\n}\r\n\r\nexport { Cacher }\r\n","import { Cacher } from './storage'\r\n\r\n/* TYPES */\r\n\r\nimport type { TemplateFunction } from './compile'\r\n\r\n/* END TYPES */\r\n\r\n/**\r\n * Eta's template storage\r\n *\r\n * Stores partials and cached templates\r\n */\r\n\r\nconst templates = new Cacher<TemplateFunction>({})\r\n\r\nexport { templates }\r\n","import { templates } from './containers'\r\nimport { copyProps, XMLEscape } from './utils'\r\nimport EtaErr from './err'\r\n\r\n/* TYPES */\r\n\r\nimport type { TemplateFunction } from './compile'\r\nimport type { Cacher } from './storage'\r\n\r\ntype trimConfig = 'nl' | 'slurp' | false\r\n\r\nexport interface EtaConfig {\r\n  /** Whether or not to automatically XML-escape interpolations. Default true */\r\n  autoEscape: boolean\r\n\r\n  /** Configure automatic whitespace trimming. Default `[false, 'nl']` */\r\n  autoTrim: trimConfig | [trimConfig, trimConfig]\r\n\r\n  /** Compile to async function */\r\n  async: boolean\r\n\r\n  /** Whether or not to cache templates if `name` or `filename` is passed */\r\n  cache: boolean\r\n\r\n  /** XML-escaping function */\r\n  e: (str: string) => string\r\n\r\n  /** Parsing options */\r\n  parse: {\r\n    /** Which prefix to use for evaluation. Default `\"\"` */\r\n    exec: string\r\n\r\n    /** Which prefix to use for interpolation. Default `\"=\"` */\r\n    interpolate: string\r\n\r\n    /** Which prefix to use for raw interpolation. Default `\"~\"` */\r\n    raw: string\r\n  }\r\n\r\n  /** Array of plugins */\r\n  plugins: Array<{ processFnString?: Function; processAST?: Function; processTemplate?: Function }>\r\n\r\n  /** Remove all safe-to-remove whitespace */\r\n  rmWhitespace: boolean\r\n\r\n  /** Delimiters: by default `['<%', '%>']` */\r\n  tags: [string, string]\r\n\r\n  /** Holds template cache */\r\n  templates: Cacher<TemplateFunction>\r\n\r\n  /** Name of the data object. Default `it` */\r\n  varName: string\r\n\r\n  /** Absolute path to template file */\r\n  filename?: string\r\n\r\n  /** Holds cache of resolved filepaths. Set to `false` to disable */\r\n  filepathCache?: Record<string, string> | false\r\n\r\n  /** A filter function applied to every interpolation or raw interpolation */\r\n  filter?: Function\r\n\r\n  /** Function to include templates by name */\r\n  include?: Function\r\n\r\n  /** Function to include templates by filepath */\r\n  includeFile?: Function\r\n\r\n  /** Name of template */\r\n  name?: string\r\n\r\n  /** Where should absolute paths begin? Default '/' */\r\n  root?: string\r\n\r\n  /** Make data available on the global object instead of varName */\r\n  useWith?: boolean\r\n\r\n  /** Whether or not to cache templates if `name` or `filename` is passed: duplicate of `cache` */\r\n  'view cache'?: boolean\r\n\r\n  /** Directory or directories that contain templates */\r\n  views?: string | Array<string>\r\n\r\n  [index: string]: any // eslint-disable-line @typescript-eslint/no-explicit-any\r\n}\r\n\r\nexport interface EtaConfigWithFilename extends EtaConfig {\r\n  filename: string\r\n}\r\n\r\nexport type PartialConfig = Partial<EtaConfig>\r\n\r\n/* END TYPES */\r\n\r\n/**\r\n * Include a template based on its name (or filepath, if it's already been cached).\r\n *\r\n * Called like `include(templateNameOrPath, data)`\r\n */\r\n\r\nfunction includeHelper(this: EtaConfig, templateNameOrPath: string, data: object): string {\r\n  const template = this.templates.get(templateNameOrPath)\r\n  if (!template) {\r\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\r\n  }\r\n  return template(data, this)\r\n}\r\n\r\n/** Eta's base (global) configuration */\r\nconst config: EtaConfig = {\r\n  async: false,\r\n  autoEscape: true,\r\n  autoTrim: [false, 'nl'],\r\n  cache: false,\r\n  e: XMLEscape,\r\n  include: includeHelper,\r\n  parse: {\r\n    exec: '',\r\n    interpolate: '=',\r\n    raw: '~'\r\n  },\r\n  plugins: [],\r\n  rmWhitespace: false,\r\n  tags: ['<%', '%>'],\r\n  templates: templates,\r\n  useWith: false,\r\n  varName: 'it'\r\n}\r\n\r\n/**\r\n * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result\r\n *\r\n * @param override Partial configuration object\r\n * @param baseConfig Partial configuration object to merge before `override`\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * let customConfig = getConfig({tags: ['!#', '#!']})\r\n * ```\r\n */\r\n\r\nfunction getConfig(override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\r\n  // TODO: run more tests on this\r\n\r\n  const res: PartialConfig = {} // Linked\r\n  copyProps(res, config) // Creates deep clone of eta.config, 1 layer deep\r\n\r\n  if (baseConfig) {\r\n    copyProps(res, baseConfig)\r\n  }\r\n\r\n  if (override) {\r\n    copyProps(res, override)\r\n  }\r\n\r\n  return res as EtaConfig\r\n}\r\n\r\n/** Update Eta's base config */\r\n\r\nfunction configure(options: PartialConfig): Partial<EtaConfig> {\r\n  return copyProps(config, options)\r\n}\r\n\r\nexport { config, getConfig, configure }\r\n","import compileToString from './compile-string'\r\nimport { getConfig } from './config'\r\nimport EtaErr from './err'\r\n\r\n/* TYPES */\r\n\r\nimport type { EtaConfig, PartialConfig } from './config'\r\nimport type { CallbackFn } from './file-handlers'\r\nimport { getAsyncFunctionConstructor } from './polyfills'\r\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\r\n\r\n/* END TYPES */\r\n\r\n/**\r\n * Takes a template string and returns a template function that can be called with (data, config, [cb])\r\n *\r\n * @param str - The template string\r\n * @param config - A custom configuration object (optional)\r\n *\r\n * **Example**\r\n *\r\n * ```js\r\n * let compiledFn = eta.compile(\"Hi <%= it.user %>\")\r\n * // function anonymous()\r\n * let compiledFnStr = compiledFn.toString()\r\n * // \"function anonymous(it,E,cb\\n) {\\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\\n}\"\r\n * ```\r\n */\r\n\r\nexport default function compile(str: string, config?: PartialConfig): TemplateFunction {\r\n  const options: EtaConfig = getConfig(config || {})\r\n\r\n  /* ASYNC HANDLING */\r\n  // The below code is modified from mde/ejs. All credit should go to them.\r\n  const ctor = options.async ? (getAsyncFunctionConstructor() as FunctionConstructor) : Function\r\n  /* END ASYNC HANDLING */\r\n\r\n  try {\r\n    return new ctor(\r\n      options.varName,\r\n      'E', // EtaConfig\r\n      'cb', // optional callback\r\n      compileToString(str, options)\r\n    ) as TemplateFunction // eslint-disable-line no-new-func\r\n  } catch (e) {\r\n    if (e instanceof SyntaxError) {\r\n      throw EtaErr(\r\n        'Bad template syntax\\n\\n' +\r\n          e.message +\r\n          '\\n' +\r\n          Array(e.message.length + 1).join('=') +\r\n          '\\n' +\r\n          compileToString(str, options) +\r\n          '\\n' // This will put an extra newline before the callstack for extra readability\r\n      )\r\n    } else {\r\n      throw e\r\n    }\r\n  }\r\n}\r\n","import compile from './compile'\r\nimport { getConfig } from './config'\r\nimport { promiseImpl } from './polyfills'\r\nimport EtaErr from './err'\r\n\r\n/* TYPES */\r\n\r\nimport type { EtaConfig, PartialConfig } from './config'\r\nimport type { TemplateFunction } from './compile'\r\nimport type { CallbackFn } from './file-handlers'\r\n\r\n/* END TYPES */\r\n\r\nfunction handleCache(template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\r\n  if (options.cache && options.name && options.templates.get(options.name)) {\r\n    return options.templates.get(options.name)\r\n  }\r\n\r\n  const templateFunc = typeof template === 'function' ? template : compile(template, options)\r\n\r\n  // Note that we don't have to check if it already exists in the cache;\r\n  // it would have returned earlier if it had\r\n  if (options.cache && options.name) {\r\n    options.templates.define(options.name, templateFunc)\r\n  }\r\n\r\n  return templateFunc\r\n}\r\n\r\n/**\r\n * Render a template\r\n *\r\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\r\n * If `template` is a template function, Eta will call it with the provided data.\r\n *\r\n * If `config.async` is `false`, Eta will return the rendered template.\r\n *\r\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\r\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.\r\n *\r\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\r\n *\r\n * @param template Template string or template function\r\n * @param data Data to render the template with\r\n * @param config Optional config options\r\n * @param cb Callback function\r\n */\r\n\r\nexport default function render(\r\n  template: string | TemplateFunction,\r\n  data: object,\r\n  config?: PartialConfig,\r\n  cb?: CallbackFn\r\n): string | Promise<string> | void {\r\n  const options = getConfig(config || {})\r\n\r\n  if (options.async) {\r\n    if (cb) {\r\n      // If user passes callback\r\n      try {\r\n        // Note: if there is an error while rendering the template,\r\n        // It will bubble up and be caught here\r\n        const templateFn = handleCache(template, options)\r\n        templateFn(data, options, cb)\r\n      } catch (err) {\r\n        return cb(err)\r\n      }\r\n    } else {\r\n      // No callback, try returning a promise\r\n      if (typeof promiseImpl === 'function') {\r\n        return new promiseImpl(function (resolve: Function, reject: Function) {\r\n          try {\r\n            resolve(handleCache(template, options)(data, options))\r\n          } catch (err) {\r\n            reject(err)\r\n          }\r\n        })\r\n      } else {\r\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\r\n      }\r\n    }\r\n  } else {\r\n    return handleCache(template, options)(data, options)\r\n  }\r\n}\r\n\r\n/**\r\n * Render a template asynchronously\r\n *\r\n * If `template` is a string, Eta will compile it to a function and call it with the provided data.\r\n * If `template` is a function, Eta will call it with the provided data.\r\n *\r\n * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.\r\n * If there is not a callback function, Eta will return a Promise that resolves to the rendered template\r\n *\r\n * @param template Template string or template function\r\n * @param data Data to render the template with\r\n * @param config Optional config options\r\n * @param cb Callback function\r\n */\r\n\r\nexport function renderAsync(\r\n  template: string | TemplateFunction,\r\n  data: object,\r\n  config?: PartialConfig,\r\n  cb?: CallbackFn\r\n): string | Promise<string> | void {\r\n  // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills\r\n  return render(template, data, Object.assign({}, config, { async: true }), cb)\r\n}\r\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","copyProps","toObj","fromObj","key","prop","hasOwnProperty","call","trimWS","config","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","String","trimLeft","replace","trimRight","escMap","&","<",">","\"","'","replaceChar","s","templateLitReg","singleQuoteReg","doubleQuoteReg","escapeRegExp","string","parse","buffer","trimLeftOfNextStr","lastIndex","parseOptions","plugins","i","plugin","processTemplate","pushString","strng","shouldTrimRightOfString","push","rmWhitespace","m","prefixes","exec","interpolate","raw","reduce","accumulator","prefix","parseOpenReg","RegExp","tags","parseCloseReg","index","precedingString","closeTag","currentObj","content","t","val","char","commentCloseInd","indexOf","processAST","compileToString","Parse","res","include","includeFile","useWith","varName","buff","buffLength","returnStr","currentBlock","type","filter","autoEscape","compileScope","async","processFnString","templates","cache","this","Cacher","cacheObj","e","newStr","test","templateNameOrPath","data","template","get","getConfig","override","baseConfig","compile","options","ctor","SyntaxError","getAsyncFunctionConstructor","handleCache","templateFunc","define","render","cb","resolve","reject","templateFn","assign"],"mappings":"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"}