// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`given the <Parallax> component > when normal configurations are given > then it renders correctly 1`] = `
<DocumentFragment>
  <div
    class="class-foo"
    style="border: 2px solid red; will-change: transform; transform: translateX(100%)translateY(100%);"
  >
    <div
      class="foo"
    />
  </div>
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { disabled: true } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { easing: 'easeInQuad' } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { easing: [ 0.2, -0.6, 1, -0.6 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { onChange: [Function onChange] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { onEnter: [Function onEnter] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { onExit: [Function onExit] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { onProgressChange: [Function onProgressChange] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { opacity: [ +0, 1 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform,opacity; opacity: 1;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { rootMargin: { top: +0, right: +0, bottom: +0, left: +0 } } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { rotate: [ '0turn', '1turn' ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: rotate(1turn);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { rotateX: [ '0turn', '1turn' ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: rotateX(1turn);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { rotateY: [ '0turn', '1turn' ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: rotateY(1turn);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { rotateZ: [ '0turn', '1turn' ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: rotateZ(1turn);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { scale: [ +0, 1 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: scale(1);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { scaleX: [ +0, 1 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: scaleX(1);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { scaleY: [ +0, 1 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: scaleY(1);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { scaleZ: [ +0, 1 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: scaleZ(1);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { shouldAlwaysCompleteAnimation: true } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { shouldDisableScalingTranslations: true } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { speed: 10 } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: translateY(-100px);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { startScroll: +0, endScroll: 1000 } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { targetElement: <div></div> } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform;"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { translateX: [ -100, 100 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: translateX(100%);"
  />
</DocumentFragment>
`;

exports[`given the <Parallax> component > when the prop { translateY: [ -100, 100 ] } is given > then it renders without issue and calls create element with props 1`] = `
<DocumentFragment>
  <div
    style="will-change: transform; transform: translateY(100%);"
  />
</DocumentFragment>
`;
