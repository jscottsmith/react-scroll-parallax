{"version":3,"file":"index.js","sources":["../../src/formatter/spacer.js","../../src/formatter/sortObject.js","../../src/tree.js","../../src/parser/parseReactElement.js","../../src/formatter/formatFunction.js","../../src/formatter/formatComplexDataStructure.js","../../src/formatter/formatPropValue.js","../../src/formatter/formatProp.js","../../src/formatter/mergeSiblingPlainStringChildrenReducer.js","../../src/formatter/sortPropsByNames.js","../../src/formatter/createPropFilter.js","../../src/formatter/formatReactElementNode.js","../../src/formatter/formatReactFragmentNode.js","../../src/formatter/formatTreeNode.js","../../src/formatter/formatTree.js","../../src/index.js"],"sourcesContent":["/* @flow */\n\nexport default (times: number, tabStop: number): string => {\n  if (times === 0) {\n    return '';\n  }\n\n  return new Array(times * tabStop).fill(' ').join('');\n};\n","/* @flow */\nimport * as React from 'react';\n\nfunction safeSortObject(value: any, seen: WeakSet<any>): any {\n  // return non-object value as is\n  if (value === null || typeof value !== 'object') {\n    return value;\n  }\n\n  // return date, regexp and react element values as is\n  if (\n    value instanceof Date ||\n    value instanceof RegExp ||\n    React.isValidElement(value)\n  ) {\n    return value;\n  }\n\n  seen.add(value);\n\n  // make a copy of array with each item passed through the sorting algorithm\n  if (Array.isArray(value)) {\n    return value.map(v => safeSortObject(v, seen));\n  }\n\n  // make a copy of object with key sorted\n  return Object.keys(value)\n    .sort()\n    .reduce((result, key) => {\n      if (key === '_owner') {\n        return result;\n      }\n      if (key === 'current' || seen.has(value[key])) {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = '[Circular]';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = safeSortObject(value[key], seen);\n      }\n      return result;\n    }, {});\n}\n\nexport default function sortObject(value: any): any {\n  return safeSortObject(value, new WeakSet());\n}\n","/* @flow */\n/* eslint-disable no-use-before-define */\n\nimport type { Key } from 'react';\n\ntype PropsType = { [key: string]: any };\ntype DefaultPropsType = { [key: string]: any };\n\nexport type StringTreeNode = {|\n  type: 'string',\n  value: string,\n|};\n\nexport type NumberTreeNode = {|\n  type: 'number',\n  value: number,\n|};\n\nexport type ReactElementTreeNode = {|\n  type: 'ReactElement',\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[],\n|};\n\nexport type ReactFragmentTreeNode = {|\n  type: 'ReactFragment',\n  key: ?Key,\n  childrens: TreeNode[],\n|};\n\nexport type TreeNode =\n  | StringTreeNode\n  | NumberTreeNode\n  | ReactElementTreeNode\n  | ReactFragmentTreeNode;\n\nexport const createStringTreeNode = (value: string): StringTreeNode => ({\n  type: 'string',\n  value,\n});\n\nexport const createNumberTreeNode = (value: number): NumberTreeNode => ({\n  type: 'number',\n  value,\n});\n\nexport const createReactElementTreeNode = (\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[]\n): ReactElementTreeNode => ({\n  type: 'ReactElement',\n  displayName,\n  props,\n  defaultProps,\n  childrens,\n});\n\nexport const createReactFragmentTreeNode = (\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactFragmentTreeNode => ({\n  type: 'ReactFragment',\n  key,\n  childrens,\n});\n","/* @flow */\n\nimport React, { type Element as ReactElement, Fragment } from 'react';\nimport {\n  ForwardRef,\n  isContextConsumer,\n  isContextProvider,\n  isForwardRef,\n  isLazy,\n  isMemo,\n  isProfiler,\n  isStrictMode,\n  isSuspense,\n  Memo,\n} from 'react-is';\nimport type { Options } from './../options';\nimport {\n  createStringTreeNode,\n  createNumberTreeNode,\n  createReactElementTreeNode,\n  createReactFragmentTreeNode,\n} from './../tree';\nimport type { TreeNode } from './../tree';\n\nconst supportFragment = Boolean(Fragment);\n\nconst getFunctionTypeName = (functionType): string => {\n  if (!functionType.name || functionType.name === '_default') {\n    return 'No Display Name';\n  }\n  return functionType.name;\n};\n\nconst getWrappedComponentDisplayName = (Component: *): string => {\n  switch (true) {\n    case Boolean(Component.displayName):\n      return Component.displayName;\n    case Component.$$typeof === Memo:\n      return getWrappedComponentDisplayName(Component.type);\n    case Component.$$typeof === ForwardRef:\n      return getWrappedComponentDisplayName(Component.render);\n    default:\n      return getFunctionTypeName(Component);\n  }\n};\n\n// heavily inspired by:\n// https://github.com/facebook/react/blob/3746eaf985dd92f8aa5f5658941d07b6b855e9d9/packages/react-devtools-shared/src/backend/renderer.js#L399-L496\nconst getReactElementDisplayName = (element: ReactElement<*>): string => {\n  switch (true) {\n    case typeof element.type === 'string':\n      return element.type;\n    case typeof element.type === 'function':\n      if (element.type.displayName) {\n        return element.type.displayName;\n      }\n      return getFunctionTypeName(element.type);\n    case isForwardRef(element):\n    case isMemo(element):\n      return getWrappedComponentDisplayName(element.type);\n    case isContextConsumer(element):\n      return `${element.type._context.displayName || 'Context'}.Consumer`;\n    case isContextProvider(element):\n      return `${element.type._context.displayName || 'Context'}.Provider`;\n    case isLazy(element):\n      return 'Lazy';\n    case isProfiler(element):\n      return 'Profiler';\n    case isStrictMode(element):\n      return 'StrictMode';\n    case isSuspense(element):\n      return 'Suspense';\n    default:\n      return 'UnknownElementType';\n  }\n};\n\nconst noChildren = (propsValue, propName) => propName !== 'children';\n\nconst onlyMeaningfulChildren = (children): boolean =>\n  children !== true &&\n  children !== false &&\n  children !== null &&\n  children !== '';\n\nconst filterProps = (originalProps: {}, cb: (any, string) => boolean) => {\n  const filteredProps = {};\n\n  Object.keys(originalProps)\n    .filter(key => cb(originalProps[key], key))\n    .forEach(key => (filteredProps[key] = originalProps[key]));\n\n  return filteredProps;\n};\n\nconst parseReactElement = (\n  element: ReactElement<*> | string | number,\n  options: Options\n): TreeNode => {\n  const { displayName: displayNameFn = getReactElementDisplayName } = options;\n\n  if (typeof element === 'string') {\n    return createStringTreeNode(element);\n  } else if (typeof element === 'number') {\n    return createNumberTreeNode(element);\n  } else if (!React.isValidElement(element)) {\n    throw new Error(\n      `react-element-to-jsx-string: Expected a React.Element, got \\`${typeof element}\\``\n    );\n  }\n\n  const displayName = displayNameFn(element);\n\n  const props = filterProps(element.props, noChildren);\n  if (element.ref !== null) {\n    props.ref = element.ref;\n  }\n\n  const key = element.key;\n  if (typeof key === 'string' && key.search(/^\\./)) {\n    // React automatically add key=\".X\" when there are some children\n    props.key = key;\n  }\n\n  const defaultProps = filterProps(element.type.defaultProps || {}, noChildren);\n  const childrens = React.Children.toArray(element.props.children)\n    .filter(onlyMeaningfulChildren)\n    .map(child => parseReactElement(child, options));\n\n  if (supportFragment && element.type === Fragment) {\n    return createReactFragmentTreeNode(key, childrens);\n  }\n\n  return createReactElementTreeNode(\n    displayName,\n    props,\n    defaultProps,\n    childrens\n  );\n};\n\nexport default parseReactElement;\n","import type { Options } from './../options';\n\nfunction noRefCheck() {}\n\nexport const inlineFunction = (fn: any): string =>\n  fn\n    .toString()\n    .split('\\n')\n    .map(line => line.trim())\n    .join('');\n\nexport const preserveFunctionLineBreak = (fn: any): string => fn.toString();\n\nconst defaultFunctionValue = inlineFunction;\n\nexport default (fn: Function, options: Options): string => {\n  const { functionValue = defaultFunctionValue, showFunctions } = options;\n  if (!showFunctions && functionValue === defaultFunctionValue) {\n    return functionValue(noRefCheck);\n  }\n\n  return functionValue(fn);\n};\n","/* @flow */\n\nimport { isValidElement } from 'react';\nimport { prettyPrint } from '@base2/pretty-print-object';\nimport sortObject from './sortObject';\nimport parseReactElement from './../parser/parseReactElement';\nimport formatTreeNode from './formatTreeNode';\nimport formatFunction from './formatFunction';\nimport spacer from './spacer';\nimport type { Options } from './../options';\n\nexport default (\n  value: Object | Array<any>,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const normalizedValue = sortObject(value);\n\n  const stringifiedValue = prettyPrint(normalizedValue, {\n    transform: (currentObj, prop, originalResult) => {\n      const currentValue = currentObj[prop];\n\n      if (currentValue && isValidElement(currentValue)) {\n        return formatTreeNode(\n          parseReactElement(currentValue, options),\n          true,\n          lvl,\n          options\n        );\n      }\n\n      if (typeof currentValue === 'function') {\n        return formatFunction(currentValue, options);\n      }\n\n      return originalResult;\n    },\n  });\n\n  if (inline) {\n    return stringifiedValue\n      .replace(/\\s+/g, ' ')\n      .replace(/{ /g, '{')\n      .replace(/ }/g, '}')\n      .replace(/\\[ /g, '[')\n      .replace(/ ]/g, ']');\n  }\n\n  // Replace tabs with spaces, and add necessary indentation in front of each new line\n  return stringifiedValue\n    .replace(/\\t/g, spacer(1, options.tabStop))\n    .replace(/\\n([^$])/g, `\\n${spacer(lvl + 1, options.tabStop)}$1`);\n};\n","/* @flow */\n\nimport { isPlainObject } from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatFunction from './formatFunction';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    return `{${formatFunction(propValue, options)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    if (isNaN(propValue.valueOf())) {\n      return `{new Date(NaN)}`;\n    }\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n","/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n","/* @flow */\n\nconst isKeyOrRefProps = (propName: string) => ['key', 'ref'].includes(propName);\n\nexport default (shouldSortUserProps: boolean) => (\n  props: string[]\n): string[] => {\n  const haveKeyProp = props.includes('key');\n  const haveRefProp = props.includes('ref');\n\n  const userPropsOnly = props.filter(oneProp => !isKeyOrRefProps(oneProp));\n\n  const sortedProps = shouldSortUserProps\n    ? [...userPropsOnly.sort()] // We use basic lexical order\n    : [...userPropsOnly];\n\n  if (haveRefProp) {\n    sortedProps.unshift('ref');\n  }\n\n  if (haveKeyProp) {\n    sortedProps.unshift('key');\n  }\n\n  return sortedProps;\n};\n","/* @flow */\n\nexport default function createPropFilter(\n  props: {},\n  filter: string[] | ((any, string) => boolean)\n) {\n  if (Array.isArray(filter)) {\n    return (key: string) => filter.indexOf(key) === -1;\n  } else {\n    return (key: string) => filter(props[key], key);\n  }\n}\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport sortPropsByNames from './sortPropsByNames';\nimport createPropFilter from './createPropFilter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${type}`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  const propFilter = createPropFilter(props, filterProps);\n\n  Object.keys(props)\n    .filter(propFilter)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(propFilter)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = sortPropsByNames(sortProps)(visibleAttributeNames);\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n","/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${type}`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n","/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport formatReactFragmentNode from './formatReactFragmentNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst jsxStopChars = ['<', '>', '{', '}'];\nconst shouldBeEscaped = (s: string) =>\n  jsxStopChars.some(jsxStopChar => s.includes(jsxStopChar));\n\nconst escape = (s: string) => {\n  if (!shouldBeEscaped(s)) {\n    return s;\n  }\n\n  return `{\\`${s}\\`}`;\n};\n\nconst preserveTrailingSpace = (s: string) => {\n  let result = s;\n  if (result.endsWith(' ')) {\n    result = result.replace(/^(.*?)(\\s+)$/, \"$1{'$2'}\");\n  }\n\n  if (result.startsWith(' ')) {\n    result = result.replace(/^(\\s+)(.*)$/, \"{'$1'}$2\");\n  }\n\n  return result;\n};\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'number') {\n    return String(node.value);\n  }\n\n  if (node.type === 'string') {\n    return node.value\n      ? `${preserveTrailingSpace(escape(String(node.value)))}`\n      : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  if (node.type === 'ReactFragment') {\n    return formatReactFragmentNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n","/* @flow */\n\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nexport default (node: TreeNode, options: Options): string =>\n  formatTreeNode(node, false, 0, options);\n","/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  if (!element) {\n    throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  }\n\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n\nexport {\n  inlineFunction,\n  preserveFunctionLineBreak,\n} from './formatter/formatFunction';\n"],"names":["times","tabStop","Array","fill","join","safeSortObject","value","seen","Date","RegExp","React","isValidElement","add","isArray","map","v","Object","keys","sort","reduce","result","key","has","sortObject","WeakSet","createStringTreeNode","type","createNumberTreeNode","createReactElementTreeNode","displayName","props","defaultProps","childrens","createReactFragmentTreeNode","supportFragment","Boolean","Fragment","getFunctionTypeName","functionType","name","getWrappedComponentDisplayName","Component","$$typeof","Memo","ForwardRef","render","getReactElementDisplayName","element","isForwardRef","isMemo","isContextConsumer","_context","isContextProvider","isLazy","isProfiler","isStrictMode","isSuspense","noChildren","propsValue","propName","onlyMeaningfulChildren","children","filterProps","originalProps","cb","filteredProps","filter","forEach","parseReactElement","options","displayNameFn","Error","ref","search","Children","toArray","child","noRefCheck","inlineFunction","fn","toString","split","line","trim","preserveFunctionLineBreak","defaultFunctionValue","functionValue","showFunctions","inline","lvl","normalizedValue","stringifiedValue","prettyPrint","transform","currentObj","prop","originalResult","currentValue","formatTreeNode","formatFunction","replace","spacer","escape","s","formatPropValue","propValue","String","symbolDescription","valueOf","isNaN","toISOString","isPlainObject","formatComplexDataStructure","hasValue","hasDefaultValue","defaultValue","usedValue","useBooleanShorthandSyntax","formattedPropValue","attributeFormattedInline","attributeFormattedMultiline","isMultilineAttribute","includes","previousNodes","currentNode","nodes","slice","length","previousNode","push","isKeyOrRefProps","shouldSortUserProps","haveKeyProp","haveRefProp","userPropsOnly","oneProp","sortedProps","unshift","createPropFilter","indexOf","compensateMultilineStringElementIndentation","formattedElement","offset","formatOneChildren","onlyPropsWithOriginalValue","haveDefaultValue","isInlineAttributeTooLong","attributes","inlineAttributeString","maxInlineAttributesLineLength","shouldRenderMultilineAttr","containsMultilineAttr","node","showDefaultProps","sortProps","out","outInlineAttr","outMultilineAttr","visibleAttributeNames","propFilter","defaultPropName","sortPropsByNames","attributeName","formatProp","newLvl","mergeSiblingPlainStringChildrenReducer","REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX","REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX","toReactElementTreeNode","isKeyedFragment","hasNoChildren","useFragmentShortSyntax","formatReactElementNode","jsxStopChars","shouldBeEscaped","some","jsxStopChar","preserveTrailingSpace","endsWith","startsWith","formatReactFragmentNode","TypeError","reactElementToJsxString","formatTree"],"mappings":"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"}