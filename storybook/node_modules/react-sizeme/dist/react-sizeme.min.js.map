{"version":3,"file":"react-sizeme.min.js","sources":["../src/resize-detector.js","../src/with-size.js","../src/component.js","../src/index.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-find-dom-node */\n\nimport React, { Children, Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport { debounce, throttle } from 'throttle-debounce'\nimport resizeDetector from './resize-detector'\n\nconst errMsg =\n  'react-sizeme: an error occurred whilst stopping to listen to node size changes'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = (WrappedComponent) => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null || (size.width == null && size.height == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction withSize(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight,\n    'You have to monitor at least one of the width or height when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      domEl = null\n\n      state = {\n        width: undefined,\n        height: undefined,\n      }\n\n      componentDidMount() {\n        this.detector = resizeDetector(resizeDetectorStrategy)\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentDidUpdate() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n        this.uninstall()\n      }\n\n      uninstall = () => {\n        if (this.domEl) {\n          try {\n            this.detector.uninstall(this.domEl)\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn(errMsg)\n          }\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = (props) => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = (state) => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        }\n        this.setState(state)\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found = this.element && ReactDOM.findDOMNode(this.element)\n\n        if (!found) {\n          // If we previously had a dom node then we need to ensure that\n          // we remove any existing listeners to avoid memory leaks.\n          this.uninstall()\n          return\n        }\n\n        if (!this.domEl) {\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else if (\n          (this.domEl.isSameNode && !this.domEl.isSameNode(found)) ||\n          this.domEl !== found\n        ) {\n          this.uninstall()\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else {\n          // Do nothing 👍\n        }\n      }\n\n      refCallback = (element) => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n\n        return (\n          (monitorWidth && c.width !== n.width) ||\n          (monitorHeight && c.height !== n.height)\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(refreshRate, (el) => {\n        const { width, height } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      })\n\n      render() {\n        const disablePlaceholder =\n          withSize.enableSSRBehaviour ||\n          withSize.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\nwithSize.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nwithSize.noPlaceholders = false\n\nexport default withSize\n","/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react'\nimport isShallowEqual from 'shallowequal'\nimport withSize from './with-size'\n\nexport default class SizeMe extends Component {\n  static defaultProps = {\n    children: undefined,\n    render: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n    const { children, render, ...sizeMeConfig } = props\n    this.createComponent(sizeMeConfig)\n    this.state = {\n      size: {\n        width: undefined,\n        height: undefined,\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      children: prevChildren,\n      render: prevRender,\n      ...currentSizeMeConfig\n    } = this.props\n    const {\n      children: nextChildren,\n      render: nextRender,\n      ...prevSizeMeConfig\n    } = prevProps\n    if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n      this.createComponent(currentSizeMeConfig)\n    }\n  }\n\n  createComponent = (config) => {\n    this.SizeAware = withSize(config)(({ children }) => children)\n  }\n\n  onSize = (size) => this.setState({ size })\n\n  render() {\n    const { SizeAware } = this\n    const render = this.props.children || this.props.render\n    return (\n      <SizeAware onSize={this.onSize}>\n        {render({ size: this.state.size })}\n      </SizeAware>\n    )\n  }\n}\n","import withSize from './with-size'\nimport SizeMe from './component'\n\nwithSize.SizeMe = SizeMe\nwithSize.withSize = withSize\n\nexport default withSize\n"],"names":["instances","resizeDetector","strategy","createResizeDetector","errMsg","defaultConfig","monitorWidth","monitorHeight","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","Component","Children","only","this","props","children","Placeholder","className","style","phProps","width","height","React","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","onSize","restProps","renderPlaceholder","renderProps","toRender","ref","withSize","config","invariant","refreshDelayStrategy","throttle","debounce","SizeMeRenderWrapper","SizeAwareComponent","undefined","_this","domEl","detector","uninstall","err","console","warn","callbackState","state","setState","element","current","next","el","getBoundingClientRect","hasSizeChanged","strategisedGetState","strategisedSetState","determineStrategy","handleDOMNode","checkIfSizeChanged","found","ReactDOM","findDOMNode","isSameNode","listenTo","enableSSRBehaviour","noPlaceholders","refCallback","SizeMe","SizeAware","render","sizeMeConfig","createComponent","prevProps","currentSizeMeConfig","prevSizeMeConfig","isShallowEqual"],"mappings":"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"}